import { ErrorUnsupportedKey, KindSECP256K1 } from '@mailchain/crypto';
import { decodeHexZeroX } from '@mailchain/encoding';

async function verifyEthereumPersonalMessage(key, message, signature) {
    switch (key.curve) {
        case KindSECP256K1:
            const messageHash = await getMessageHash(message);
            return key.verify(messageHash, signature);
        default:
            throw new ErrorUnsupportedKey(key.curve);
    }
}
async function signEthereumPersonalMessage(key, message) {
    switch (key.curve) {
        case KindSECP256K1:
            const messageHash = await getMessageHash(message);
            return key.sign(messageHash);
        default:
            throw new ErrorUnsupportedKey(key.curve);
    }
}
async function getMessageHash(message) {
    const { hashMessage } = await import('@ethersproject/hash');
    return decodeHexZeroX(hashMessage(message));
}

export { getMessageHash, signEthereumPersonalMessage, verifyEthereumPersonalMessage };
