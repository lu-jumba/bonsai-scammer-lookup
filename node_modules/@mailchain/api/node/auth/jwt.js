'use strict';

var encoding = require('@mailchain/encoding');
var globalAxios = require('axios');
var isArrayBuffer = require('lodash/isArrayBuffer');

const getToken = async (requestKey, payload, exp) => {
    const headerSegment = encoding.encodeBase64UrlSafe(Buffer.from(JSON.stringify({ alg: 'EdDSA', typ: 'JWT' })));
    const payloadSegment = encoding.encodeBase64UrlSafe(Buffer.from(JSON.stringify({ ...payload, exp })));
    const key = `${headerSegment}.${payloadSegment}`;
    const signedKey = await requestKey.sign(Buffer.from(key));
    const signatureSegment = encoding.encodeBase64UrlSafe(signedKey);
    return `${key}.${signatureSegment}`;
};
const getAxiosWithSigner = (requestKey) => {
    const axiosInstance = globalAxios.create();
    axiosInstance.interceptors.request.use(async (request) => {
        if (request.headers) {
            const expires = Math.floor(Date.now() / 1000 + 60 * 5); // 5 mins
            const tokenPayload = createTokenPayload(new URL(request?.url ?? ''), request.method?.toUpperCase() ?? '', request.data);
            const token = await getToken(requestKey, tokenPayload, expires);
            request.headers.Authorization = `vapid t=${token}, k=${encoding.encodeBase64UrlSafe(requestKey.publicKey.bytes)}`;
        }
        return request;
    });
    return axiosInstance;
};
function createTokenPayload(url, method, data) {
    let len;
    // Taking code from https://github.com/axios/axios/blob/main/lib/adapters/http.js#L186-L198 to calculate content length how axios does it
    if (data != null && ['POST', 'PUT', 'PATCH'].some((m) => m === method.toUpperCase())) {
        if (Buffer.isBuffer(data)) {
            len = data.length;
        }
        else if (isArrayBuffer(data)) {
            len = Buffer.byteLength(new Uint8Array(data));
        }
        else if (typeof data === 'string') {
            len = Buffer.byteLength(data, 'utf-8');
        }
        else if (toString.call(data) === '[object Uint8Array]') {
            len = data.length;
        }
        else {
            len = Buffer.byteLength(JSON.stringify(data));
        }
    }
    else {
        len = 0;
    }
    return {
        m: method.toUpperCase(),
        url: url.pathname,
        len,
        aud: url.host,
        q: url.search.length > 1 ? url.search.replace(/^\?/, '') : undefined,
    };
}

exports.createTokenPayload = createTokenPayload;
exports.getAxiosWithSigner = getAxiosWithSigner;
exports.getToken = getToken;
