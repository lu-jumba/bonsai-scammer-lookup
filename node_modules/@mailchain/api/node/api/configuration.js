'use strict';

/* tslint:disable */
/* eslint-disable */
/**
 * Mailchain API
 * All the information needed to talk to the API.  To raise see anything wrong? Raise an [issue](https://github.com/mailchain/mailchain/issues)
 *
 * The version of the OpenAPI document: ~mailchain-version~
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
class Configuration {
    constructor(param = {}) {
        /**
         * parameter for apiKey security
         * @param name security name
         * @memberof Configuration
         */
        Object.defineProperty(this, "apiKey", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * parameter for basic security
         *
         * @type {string}
         * @memberof Configuration
         */
        Object.defineProperty(this, "username", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * parameter for basic security
         *
         * @type {string}
         * @memberof Configuration
         */
        Object.defineProperty(this, "password", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * parameter for oauth2 security
         * @param name security name
         * @param scopes oauth2 scope
         * @memberof Configuration
         */
        Object.defineProperty(this, "accessToken", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * override base path
         *
         * @type {string}
         * @memberof Configuration
         */
        Object.defineProperty(this, "basePath", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * base options for axios calls
         *
         * @type {any}
         * @memberof Configuration
         */
        Object.defineProperty(this, "baseOptions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The FormData constructor that will be used to create multipart form data
         * requests. You can inject this here so that execution environments that
         * do not support the FormData class can still run the generated client.
         *
         * @type {new () => FormData}
         */
        Object.defineProperty(this, "formDataCtor", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.apiKey = param.apiKey;
        this.username = param.username;
        this.password = param.password;
        this.accessToken = param.accessToken;
        this.basePath = param.basePath;
        this.baseOptions = param.baseOptions;
        this.formDataCtor = param.formDataCtor;
    }
    /**
     * Check if the given MIME is a JSON MIME.
     * JSON MIME examples:
     *   application/json
     *   application/json; charset=UTF8
     *   APPLICATION/JSON
     *   application/vnd.company+json
     * @param mime - MIME (Multipurpose Internet Mail Extensions)
     * @return True if the given MIME is JSON, false otherwise.
     */
    isJsonMime(mime) {
        const jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
}

exports.Configuration = Configuration;
