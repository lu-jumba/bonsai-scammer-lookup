import { KindSECP256R1, KindSECP256K1, KindED25519 } from '@mailchain/crypto';
import { encodeHexZeroX } from '@mailchain/encoding';
import { PublicKeyCurveEnum, PrivateKeyCurveEnum } from '../api/api.js';
import { ErrorUnsupportedKey } from './errors.js';

/** Convert {@link PublicKey} to {@link ApiPublicKey}. */
function convertPublic(key) {
    switch (key.curve) {
        case KindED25519:
            return { curve: PublicKeyCurveEnum.Ed25519, value: encodeHexZeroX(key.bytes), encoding: 'hex/0x-prefix' };
        case KindSECP256K1:
            return { curve: PublicKeyCurveEnum.Secp256k1, value: encodeHexZeroX(key.bytes), encoding: 'hex/0x-prefix' };
        case KindSECP256R1:
            return { curve: PublicKeyCurveEnum.Secp256r1, value: encodeHexZeroX(key.bytes), encoding: 'hex/0x-prefix' };
        default:
            throw new ErrorUnsupportedKey(key.curve);
    }
}
/** Convert {@link PrivateKey} to {@link ApiPrivateKey} */
function convertPrivate(key) {
    switch (key.curve) {
        case KindED25519:
            return { curve: PrivateKeyCurveEnum.Ed25519, value: encodeHexZeroX(key.bytes), encoding: 'hex/0x-prefix' };
        case KindSECP256K1:
            return {
                curve: PrivateKeyCurveEnum.Secp256k1,
                value: encodeHexZeroX(key.bytes),
                encoding: 'hex/0x-prefix',
            };
        case KindSECP256R1:
            return {
                curve: PrivateKeyCurveEnum.Secp256r1,
                value: encodeHexZeroX(key.bytes),
                encoding: 'hex/0x-prefix',
            };
        default:
            throw new ErrorUnsupportedKey(key.curve);
    }
}

export { convertPrivate, convertPublic };
