'use strict';

var parseWalletAddress = require('./parseWalletAddress.js');
var address$2 = require('./protocols/tezos/address.js');
var address$3 = require('./protocols/filecoin/address.js');
var address$1 = require('./protocols/near/address.js');
var address = require('./protocols/ethereum/address.js');
var consts = require('./protocols/consts.js');

function isMailchainAccountAddress(address) {
    const isMailchainUsername = address.username.match(/(^[a-zA-Z0-9][_\-a-zA-Z0-9]{0,18}[a-zA-Z0-9])$/) != null;
    const isJustMailchainDomain = address.domain.match(/^mailchain\.[a-z]+$/) != null;
    return isMailchainUsername && isJustMailchainDomain;
}
function isEthereumAddress(address$1) {
    const props = parseWalletAddress.parseWalletAddress(address$1);
    if (props?.protocol !== consts.ETHEREUM)
        return false;
    return address.validateEthereumAddress(address$1.username);
}
function isNearImplicitAccount(address) {
    const props = parseWalletAddress.parseWalletAddress(address);
    if (props?.protocol !== consts.NEAR)
        return false;
    return address$1.validateNearImplicitAccount(address.username);
}
function isTezosAddress(address) {
    const props = parseWalletAddress.parseWalletAddress(address);
    if (props?.protocol !== consts.TEZOS)
        return false;
    return address$2.validateTezosAddress(address.username);
}
function isFilecoinAddress(address) {
    const props = parseWalletAddress.parseWalletAddress(address);
    if (props?.protocol !== consts.FILECOIN)
        return false;
    return address$3.validateFilecoinAddress(address.username);
}

exports.isEthereumAddress = isEthereumAddress;
exports.isFilecoinAddress = isFilecoinAddress;
exports.isMailchainAccountAddress = isMailchainAccountAddress;
exports.isNearImplicitAccount = isNearImplicitAccount;
exports.isTezosAddress = isTezosAddress;
