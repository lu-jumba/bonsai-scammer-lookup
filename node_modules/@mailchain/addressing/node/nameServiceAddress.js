'use strict';

/**
 * @param username must be defined and be non-empty string
 * @param domainParts each of the parts in the domain, will be joined with dot `"."`
 */
function createNameServiceAddress(username, ...domainParts) {
    const domain = domainParts
        .filter((d) => d != null)
        .join('.')
        .toLowerCase();
    if (username && username.length > 0 && domain && domain.length > 0)
        return { username, domain };
    throw new Error(`invalid name service address with username [${username}] and domain [${domain}]`);
}
function parseNameServiceAddress(address) {
    const [username, domain] = address.split('@');
    if (username && domain)
        return createNameServiceAddress(username, domain);
    throw new Error(`invalid address format of [${address}]`);
}
function isSameNameServiceAddress(a, b) {
    return a.username === b.username && a.domain === b.domain;
}
function isNameServiceAddress(a) {
    return typeof a.username === 'string' && typeof a.domain === 'string';
}

exports.createNameServiceAddress = createNameServiceAddress;
exports.isNameServiceAddress = isNameServiceAddress;
exports.isSameNameServiceAddress = isSameNameServiceAddress;
exports.parseNameServiceAddress = parseNameServiceAddress;
