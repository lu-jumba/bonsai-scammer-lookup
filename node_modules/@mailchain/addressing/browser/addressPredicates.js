import { parseWalletAddress } from './parseWalletAddress.js';
import { validateTezosAddress } from './protocols/tezos/address.js';
import { validateFilecoinAddress } from './protocols/filecoin/address.js';
import { validateNearImplicitAccount } from './protocols/near/address.js';
import { validateEthereumAddress } from './protocols/ethereum/address.js';
import { ETHEREUM, NEAR, TEZOS, FILECOIN } from './protocols/consts.js';

function isMailchainAccountAddress(address) {
    const isMailchainUsername = address.username.match(/(^[a-zA-Z0-9][_\-a-zA-Z0-9]{0,18}[a-zA-Z0-9])$/) != null;
    const isJustMailchainDomain = address.domain.match(/^mailchain\.[a-z]+$/) != null;
    return isMailchainUsername && isJustMailchainDomain;
}
function isEthereumAddress(address) {
    const props = parseWalletAddress(address);
    if (props?.protocol !== ETHEREUM)
        return false;
    return validateEthereumAddress(address.username);
}
function isNearImplicitAccount(address) {
    const props = parseWalletAddress(address);
    if (props?.protocol !== NEAR)
        return false;
    return validateNearImplicitAccount(address.username);
}
function isTezosAddress(address) {
    const props = parseWalletAddress(address);
    if (props?.protocol !== TEZOS)
        return false;
    return validateTezosAddress(address.username);
}
function isFilecoinAddress(address) {
    const props = parseWalletAddress(address);
    if (props?.protocol !== FILECOIN)
        return false;
    return validateFilecoinAddress(address.username);
}

export { isEthereumAddress, isFilecoinAddress, isMailchainAccountAddress, isNearImplicitAccount, isTezosAddress };
