import { KindSECP256K1 } from '@mailchain/crypto';
import { decodeHexZeroX } from '@mailchain/encoding';

/**
 * Derive the ethereum address corresponding to the {@link PublicKey}.
 *
 * @param publicKey must be with with {@link KindSECP256K1} curve
 * @throw if the provided key is on unsupported curve
 */
async function addressFromPublicKey(publicKey) {
    if (publicKey.curve !== KindSECP256K1) {
        throw new Error(`public key must be ${KindSECP256K1}`);
    }
    const { computeAddress } = await import('@ethersproject/transactions');
    return decodeHexZeroX(computeAddress(publicKey.bytes));
}
function validateEthereumAddress(address) {
    return /^0x[a-fA-F0-9]{40}/.test(address);
}

export { addressFromPublicKey, validateEthereumAddress };
