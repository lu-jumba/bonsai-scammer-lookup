import { encode, decode, EncodingTypes } from '@mailchain/encoding';
import { ALL_PROTOCOLS, FILECOIN, NEAR, MAILCHAIN, TEZOS, SUBSTRATE, ETHEREUM, ALGORAND } from './protocols/consts.js';

/**
 * Convert address from Uint8Array, selects the relevant encoding method and encodes it as string.
 */
function encodeAddressByProtocol(address, protocol) {
    const encoding = encodingByProtocol(protocol);
    const encoded = encode(encoding, address);
    return { encoded, encoding };
}
/**
 * Convert address from string, selects the relevant encoding method and decodes it as Uint8Array.
 */
function decodeAddressByProtocol(address, protocol) {
    const encoding = encodingByProtocol(protocol);
    const decoded = decode(encoding, address);
    return { decoded, encoding };
}
/**
 * EncodingByProtocol returns the relevant encoding method the protocol commonly uses.
 */
//
function encodingByProtocol(protocol) {
    switch (protocol) {
        case ALGORAND:
            return EncodingTypes.Base32;
        case ETHEREUM:
            return EncodingTypes.Hex0xPrefix;
        case SUBSTRATE:
        case TEZOS:
            return EncodingTypes.Base58;
        case MAILCHAIN:
        case NEAR:
        case FILECOIN:
            return EncodingTypes.Utf8;
        default:
            throw new Error(`unknown address encoding of [${protocol}]. Supported ${ALL_PROTOCOLS}.`);
    }
}

export { decodeAddressByProtocol, encodeAddressByProtocol, encodingByProtocol };
