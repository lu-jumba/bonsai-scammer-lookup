import { addressFromPublicKey as addressFromPublicKey$1 } from './protocols/ethereum/address.js';
import { tezosAddressFromPublicKey } from './protocols/tezos/address.js';
import { convertEthAddressToFilDelegated, MAINNET_PREFIX } from './protocols/filecoin/delegatedAddress.js';
import { FILECOIN, TEZOS, ETHEREUM } from './protocols/consts.js';

/**
 * Derive the address corresponding to the {@link PublicKey}.
 *
 * @param publicKey the key to derive the address from
 * @param protocol the protocol the address should be derived by
 *
 * @throws Error for unsupported protocols (only {@link ETHEREUM} supported) and for protocol unsupported key types.
 */
async function addressFromPublicKey(publicKey, protocol) {
    switch (protocol) {
        case ETHEREUM:
            return addressFromPublicKey$1(publicKey);
        case TEZOS:
            return tezosAddressFromPublicKey(publicKey);
        case FILECOIN:
            const ethAddress = await addressFromPublicKey$1(publicKey);
            return convertEthAddressToFilDelegated(ethAddress, MAINNET_PREFIX);
        default:
            throw new Error(`address from PublicKey for {${protocol}} not unsupported`);
    }
}

export { addressFromPublicKey };
