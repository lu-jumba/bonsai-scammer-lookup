'use strict';

var base32 = require('./base32.js');
var base58 = require('./base58.js');
var base64 = require('./base64.js');
var consts = require('./consts.js');
var hex = require('./hex.js');
var utf8 = require('./utf8.js');

class UnsupportedEncodingError extends Error {
    constructor(encoding) {
        super(`Encoding [${encoding}] not supported`);
    }
}
/**
 * Decode returns the bytes represented by the decoded string src.
 * Decode uses the decode method mapped to kind parameter.
 *
 * If the input is kind is unknown or the input is malformed for the decode method it returns an error.
 * @param encoding
 * @param src
 * @returns
 */
function decode(encoding, src) {
    switch (encoding.toLowerCase()) {
        case consts.EncodingTypes.Base58:
            return base58.decodeBase58(src);
        case consts.EncodingTypes.Hex:
            return hex.decodeHex(src);
        case consts.EncodingTypes.Hex0xPrefix:
            return hex.decodeHexZeroX(src);
        case consts.EncodingTypes.Utf8:
            return utf8.decodeUtf8(src);
        case consts.EncodingTypes.Base32:
            return base32.decodeBase32(src);
        case consts.EncodingTypes.HexAny:
            return hex.decodeHexAny(src);
        default:
            throw new UnsupportedEncodingError(encoding);
    }
}
/**
 * Encode returns the bytes encoded as requested by the encoding parameter.
 * @param encoding
 * @param src
 * @returns encoded value
 */
function encode(encoding, src) {
    switch (encoding.toLowerCase()) {
        case consts.EncodingTypes.Base58:
            return base58.encodeBase58(src);
        case consts.EncodingTypes.Hex:
            return hex.encodeHex(src);
        case consts.EncodingTypes.Hex0xPrefix:
            return hex.encodeHexZeroX(src);
        case consts.EncodingTypes.Base64:
            return base64.encodeBase64UrlSafe(src);
        case consts.EncodingTypes.Utf8:
            return utf8.encodeUtf8(src);
        case consts.EncodingTypes.Base32:
            return base32.encodeBase32(src);
        default:
            throw new UnsupportedEncodingError(encoding);
    }
}

exports.decode = decode;
exports.encode = encode;
