import { KeyRing } from '@mailchain/keyring';
import { DistributeMailError, PrepareMailError, SentMailDeliveryRequests, SendMailParams } from '@mailchain/internal/sending/mail';
import { Configuration, MailchainResult } from '@mailchain/internal';
export declare class Mailchain {
    private readonly keyRing;
    private readonly config;
    private readonly _userProfile;
    private readonly _mailboxOperations;
    constructor(keyRing: KeyRing, config: Configuration);
    static fromAccountSeed(seed: Uint8Array | string, config?: Configuration): Mailchain;
    /**
     * Use your Secret Recovery Phrase to authenticate with the SDK.
     * You can get your Secret Recovery Phrases when registering an account or via the [settings page](https://app.mailchain.com/settings) in the application.
     * @param secretRecoveryPhrase a 24 word [BIP 39](https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki) compatible mnemonic phrase.
     * @returns an authenticated {@link Mailchain} SDK. Use {@link Mailchain.user()} to get the currently authenticate used details
     */
    static fromSecretRecoveryPhrase(secretRecoveryPhrase: string, password?: string, config?: Configuration): Mailchain;
    /**
     * @deprecated use {@link fromSecretRecoveryPhrase} instead.
     */
    static fromMnemonicPhrase(mnemonic: string, password?: string, config?: Configuration): Mailchain;
    static fromKeyRing(keyRing: KeyRing, config?: Configuration): Mailchain;
    /**
     * Send a mail to any blockchain or Mailchain address using any wallet registered in your Mailchain account.
     *
     * @param params {@link SendMailParams} information about message to send.
     * Required:
     * - `from` the address that the mail is being sent from.
     * - At least one of `to`, `cc`, or `bcc`, who will receive the mail.
     * - `subject` of the mail.
     * - `content` both `html` and `text`.
     * @param options {@link SendMailOptions} additional options for sending mail.
     *
     * @example
     * import { Mailchain } from '@mailchain/sdk';
     *
     * const secretRecoveryPhrase = process.env.SECRET_RECOVERY_PHRASE!; // 24 word mnemonicPhrase
     *
     * const mailchain = Mailchain.fromSecretRecoveryPhrase(secretRecoveryPhrase);
     *
     * const result = await mailchain.sendMail({
     * 		from: `yoursername@mailchain.com`, // sender address
     * 		to: [`0xbb56FbD7A2caC3e4C17936027102344127b7a112@ethereum.mailchain.com`], // list of recipients (blockchain or mailchain addresses)
     * 		subject: 'My first message', // subject line
     * 		content: {
     * 			text: 'Hello Mailchain ðŸ‘‹', // plain text body
     * 			html: '<p>Hello Mailchain ðŸ‘‹</p>', // html body
     * 		},
     * });
     *
     * if (error) {
     *   // handle error
     *   console.warn('Mailchain error', error);
     *   return;
     * }
     * // handle success send mail result
     * console.log(data);
     *
     * @returns Status of the messaging sending request. {@link SentMail} contains different data
     * depending on the status of the request.
     */
    sendMail(params: SendMailParams, options?: SendMailOptions): Promise<MailchainResult<SentMail, SendMailError>>;
    /**
     * Gets the username and mail address corresponding to the authenticated user.
     *
     * @throws a {@link UserNotFoundError} error if the mnemonic phrase or seed does not have a user registered.
     * A user must be registered via {@link https://app.mailchain.com/register}.
     * Check the mnemonic phrase or seed is correct.
     *
     * @returns a promise containing the username and the mail address of the logged in user.
     *
     * @example
     *
     * import { Mailchain } from "@mailchain/sdk";
     *
     * const secretRecoveryPhrase = process.env.SECRET_RECOVERY_PHRASE!; // 24 word mnemonicPhrase
     *
     * const mailchain = Mailchain.fromSecretRecoveryPhrase(secretRecoveryPhrase);
     *
     * const user = await mailchain.user();
     *
     * console.log(`username: ${user.username}, address: ${user.address}`);
     * // username: alice, address: alice@mailchain.com
     */
    user(): Promise<{
        username: string;
        address: string;
    }>;
    private getSenderMailbox;
    private saveSentMessage;
}
export type SendMailError = PrepareMailError | DistributeMailError;
export type SentMail = {
    /**
     * The message ID of the message saved to the outbox/sent folder.
     * This is only available when the message is saved to the outbox/sent folder.
     * Saving to the outbox/sent folder is enabled by default and controlled by {@link SendMailOptions}.
     */
    savedMessageId: string | undefined;
    sentMailDeliveryRequests: SentMailDeliveryRequests;
};
/**
 * Additional options for sending mail.
 */
export type SendMailOptions = {
    /**
     * Prevents saving the sent message to the sent folder.
     * This is useful when sending messages you don't want to be saved in the sent folder.
     */
    saveToSentFolder?: boolean;
};
