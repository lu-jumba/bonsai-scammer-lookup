import { AddressHeader, DateHeader, Header, MessageIdsHeader, StringHeader } from './types';
import { MessageComposerContext } from './messageComposerContext';
/**
 * Processes all the headers and outputs single `string` chunk that represents the headers into MIME format.
 *
 * Note: there isn't leading/trailing CRLF of the output, you need to add your own if you want one.
 */
export declare function buildHeaders(headers: Header<any>[], ctx: MessageComposerContext): Promise<string>;
/**
 * Export single {@link Header} into it's MIME format. May contain multiple lines if the contents have been folded.
 *
 * Example: `"Subject: This is the subject of the message"`
 */
export declare function exportHeader(header: Header<any>, ctx: MessageComposerContext): Promise<string>;
/** Export just the {@link Header#value} part of the header. The {@link Header#label} is not exported. */
export declare function exportHeaderValue(header: Header<any>, ctx: MessageComposerContext): Promise<string>;
/** Export the {@link Header#attrs} part of the header as separate element in the resulting `string[]` array. */
export declare function exportHeaderAttributes(attrs: NonNullable<Header<any>['attrs']>, ctx: MessageComposerContext): Promise<string[]>;
/** Export the `string` value out of {@link StringHeader}. It takes into consideration length of the value and the encoding of it. */
export declare function exportStringHeader(header: StringHeader, ctx: MessageComposerContext): Promise<string>;
/**
 * Export the `Date` value out of {@link DateHeader}.
 *
 * Example: Wed, 17 Aug 2022 10:01:56 +0000
 */
export declare function exportDateHeader(header: DateHeader, _ctx: MessageComposerContext): Promise<string>;
/**
 * Export the addresses out of the {@link AddressHeader}.
 * It joins every address into new line divided with `",CRLF "`, ready to be appended to the header label.
 *
 * Example:
 * ```
 * "Alice Lastname" <alice@mailchain.com>,
 * "Bob Lastname" <bob@mailchain.com>
 * ```
 */
export declare function exportAddressHeader(header: AddressHeader, _ctx: MessageComposerContext): Promise<string>;
export declare function exportMessageIdHeader(header: MessageIdsHeader, _ctx: MessageComposerContext): Promise<string>;
