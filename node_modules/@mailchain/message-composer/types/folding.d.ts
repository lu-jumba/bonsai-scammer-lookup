/**
 * Simple and efficient folding that doesn't take into consideration any white spaces nor other semantic breaks. It just folds at the `lengthLimit`.
 *
 * @param str the content to be folded
 * @param opts.lineLength the max length of the line
 * @param opts.prefix this will be added before each line (even when not folded). Counts toward line length limit.
 * @param opts.suffix this will be added after each line (even when not folded). Counts toward line length limit.
 * @param opts.padNewLines each new line (not the first line) will be have padding added at the beginning.
 * @param opts.encodingConsideration takes the encoding when folding. For `"base64"`, makes sure the folding happens on 4-char chunks.
 */
export declare function simpleHardFold(str: string, opts: {
    lineLength: number;
    prefix?: string;
    suffix?: string;
    padNewLines?: boolean;
    encodingConsideration: 'base64';
}): string;
/**
 * Original source NodeMailer: https://github.com/nodemailer/nodemailer/blob/master/lib/mime-funcs/index.js#L501-L536
 *
 * Folds long lines, useful for folding header lines (afterSpace=false) and
 * flowed text (afterSpace=true)
 *
 * @param str String to be folded
 * @param lineLength length of a line
 * @param  afterSpace If true, leave a space in th end of a line
 *
 * @return String with folded lines
 */
export declare function semanticLineFold(str: string, lineLength: number, afterSpace?: boolean): string;
/**
 * Append the `appendParts` onto the `content` by checking if there is space left on the last line to append the part. If there is no space left, new line is started with HTAB padding.
 *
 * The content and each of the parts is delimited with semicolon `;`.
 */
export declare function contentAppendWithFolding(content: string, appendParts: string[], lineLength: number): string;
