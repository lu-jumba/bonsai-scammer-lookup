export type SuccessMailchainResult<D> = {
    data: D;
    error?: undefined;
};
export type ErrorMailchainResult<E extends Error> = {
    error: E;
    data?: undefined;
};
export type MailchainResult<D, E extends Error = Error> = SuccessMailchainResult<D> | ErrorMailchainResult<E>;
type ResultsWithParams<T, E extends Error, P> = {
    result: MailchainResult<T, E>;
    params: P;
};
export declare function partitionMailchainResults<T, E extends Error, P>(calls: ResultsWithParams<T, E, P>[]): {
    successes: Array<{
        params: P;
        data: T;
    }>;
    failures: Array<{
        params: P;
        error: E;
    }>;
};
export {};
