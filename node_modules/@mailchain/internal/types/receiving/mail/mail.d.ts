import { KeyRingDecrypter } from '@mailchain/keyring';
import { AxiosInstance } from 'axios';
import { Payload } from '../../transport';
import { PayloadReceiver } from '../payload';
import { Configuration } from '../../configuration';
import { ReadonlyMailerPayload } from '../../transport/mailer/payload';
import { MailerContentResolver } from '../mailer';
import { DeliveryRequests } from '../deliveryRequests';
export type ReadonlyMailPayload = ReadonlyMailerPayload | Payload;
export type ReceivedMail = ReceivedMailOk | ReceivedMailError;
/**
 * Success type for a mail that was received.
 */
export type ReceivedMailOk = {
    status: 'success';
    /**
     * Payload of the mail.
     */
    payload: ReadonlyMailPayload;
    /**
     * Hash of delivery request.
     */
    deliveryRequestHash: Uint8Array;
};
/**
 * Error type for a mail that could not be received.
 */
export type ReceivedMailError = {
    status: 'failure';
    /**
     * Reason the mail could not be received.
     */
    cause: Error;
};
/**
 * Receive mail from the Mailchain network.
 */
export declare class MailReceiver {
    private readonly deliveryRequests;
    private readonly mailerReceiver;
    private readonly payloadReceiver;
    constructor(deliveryRequests: DeliveryRequests, mailerReceiver: MailerContentResolver, payloadReceiver: PayloadReceiver);
    static create(configuration: Configuration, receiverMessagingKeyDecrypter: KeyRingDecrypter, axiosInstance?: AxiosInstance): MailReceiver;
    /**
     * Confirm the delivery of a mail has been completed.
     * @param hash of the delivery request.
     */
    confirmDelivery(deliveryRequestHash: Uint8Array): Promise<void>;
    /**
     * Get all undelivered mail.
     * @returns the mail that has been received.
     */
    getUndelivered(): Promise<ReceivedMail[]>;
    /**
     * creates the mail content from the payload.
     * @param payload the decrypted payload received from the network.
     * @returns
     */
    private processReceivedPayload;
}
