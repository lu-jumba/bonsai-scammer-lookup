import { ED25519ExtendedPrivateKey } from '@mailchain/crypto';
import { AxiosInstance } from 'axios';
import { KeyRingDecrypter } from '@mailchain/keyring';
import { Payload } from '../../transport';
import { DeliveryRequests } from '../deliveryRequests';
import { Configuration } from '../../configuration';
import { PayloadOriginVerifier } from '../../transport/payload/verifier';
export type ReceivedPayload = ReceivedPayloadOk | ReceivedPayloadError;
type ReceivedPayloadOk = {
    status: 'success';
    payload: Payload;
};
type ReceivedPayloadError = {
    status: 'failure';
    cause: Error;
};
export type UndeliveredPayload = UndeliveredPayloadOk | UndeliveredPayloadPayloadError | UndeliveredPayloadError;
export type UndeliveredPayloadOk = {
    status: 'success';
    payload: Payload;
    deliveryRequestHash: Uint8Array;
};
export type UndeliveredPayloadPayloadError = {
    status: 'error-payload';
    cause: Error;
    deliveryRequestHash: Uint8Array;
};
export type UndeliveredPayloadError = {
    status: 'error-delivery-request';
    cause: Error;
    deliveryRequestHash: Uint8Array;
};
export declare class PayloadReceiver {
    private readonly deliveryRequests;
    private readonly payloadOriginVerifier;
    private readonly axiosInstance;
    constructor(deliveryRequests: DeliveryRequests, payloadOriginVerifier: PayloadOriginVerifier, axiosInstance: AxiosInstance);
    static create(configuration: Configuration, receiverMessagingKeyDecrypter: KeyRingDecrypter, axiosInstance?: AxiosInstance): PayloadReceiver;
    getUndelivered(): Promise<UndeliveredPayload[]>;
    get(payloadRootEncryptionKey: ED25519ExtendedPrivateKey, payloadUri: string): Promise<ReceivedPayload>;
}
export {};
