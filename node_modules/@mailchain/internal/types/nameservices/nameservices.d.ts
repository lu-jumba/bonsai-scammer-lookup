import { PublicKey } from '@mailchain/crypto';
import { NameServiceAddress } from '@mailchain/addressing';
import { IdentityKeysApiInterface } from '@mailchain/api';
import { Configuration } from '../configuration';
import { IdentityKeys } from '../identityKeys';
export declare const PROTOCOLS_SUPPORTING_NAMESERVICE: readonly ["ethereum", "tezos"];
export type ResolvedName = {
    name: string;
    resolver: string;
    address: NameServiceAddress;
};
export declare class Nameservices {
    private readonly identityKeysApi;
    private readonly identityKeysService;
    private readonly mailchainAddressDomain;
    constructor(identityKeysApi: IdentityKeysApiInterface, identityKeysService: IdentityKeys, mailchainAddressDomain: string);
    static create(config: Configuration): Nameservices;
    reverseResolveNames(identityKey: PublicKey): Promise<ResolvedName[]>;
    nameResolvesToMailbox(nsName: string, mailboxIdentityKey: PublicKey): Promise<NameServiceAddress | null>;
}
