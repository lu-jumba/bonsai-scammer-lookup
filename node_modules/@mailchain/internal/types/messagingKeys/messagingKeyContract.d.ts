import { ContractCall, MessagingKeysApiInterface } from '@mailchain/api';
import { AxiosInstance } from 'axios';
import { ProtocolType } from '@mailchain/addressing';
import { PublicKey } from '@mailchain/crypto';
import { Configuration, MailchainResult } from '../';
import { ContractCallMessagingKeyResolver } from './contractResolvers/resolver';
import { MessagingKeyVerifier } from './verify';
import { ResolvedAddress, ResolveAddressError } from './messagingKeys';
export declare class MessagingKeyContractCall {
    private readonly resolvers;
    private readonly messagingKeysApi;
    private readonly messagingKeyVerifier;
    constructor(resolvers: Map<ProtocolType, ContractCallMessagingKeyResolver>, messagingKeysApi: MessagingKeysApiInterface, messagingKeyVerifier: MessagingKeyVerifier);
    static create(configuration: Configuration, axiosInstance?: AxiosInstance): MessagingKeyContractCall;
    resolve(protocol: ProtocolType, contractCall: ContractCall, identityKey?: PublicKey): Promise<MailchainResult<ResolvedAddress, ResolveAddressError>>;
}
