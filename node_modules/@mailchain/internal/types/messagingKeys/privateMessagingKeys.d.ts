import { PrivateKey } from '@mailchain/crypto';
import { KeyRing } from '@mailchain/keyring';
import { SenderMessagingKeyIncorrect } from '@mailchain/signatures';
import { MailchainResult } from '..';
import { Configuration } from '../configuration';
import { AddressNonce, GetMessagingKeyLatestNonceError } from './addressNonce';
import { MessagingKeys, ResolveAddressError } from './messagingKeys';
import { MessagingKeyNotRegisteredError } from './errors';
export type GetExportablePrivateMessagingKeyError = ResolveAddressError | GetMessagingKeyLatestNonceError | SenderMessagingKeyIncorrect | MessagingKeyNotRegisteredError;
export declare class PrivateMessagingKeys {
    private readonly messagingKeys;
    private readonly addressNonce;
    constructor(messagingKeys: MessagingKeys, addressNonce: AddressNonce);
    static create(config: Configuration): PrivateMessagingKeys;
    getExportablePrivateMessagingKey(address: string, keyRing: KeyRing): Promise<MailchainResult<PrivateKey, GetExportablePrivateMessagingKeyError>>;
}
