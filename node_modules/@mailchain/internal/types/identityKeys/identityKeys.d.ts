import { MailchainAddress, ProtocolType } from '@mailchain/addressing';
import { PublicKey } from '@mailchain/crypto';
import { AddressesApiInterface, IdentityKeysApiInterface } from '@mailchain/api';
import { Configuration } from '../configuration';
export declare class IdentityKeys {
    private readonly addressesApi;
    private readonly identityKeyApi;
    constructor(addressesApi: AddressesApiInterface, identityKeyApi: IdentityKeysApiInterface);
    static create(config: Configuration): IdentityKeys;
    getAddressIdentityKey(address: MailchainAddress): Promise<{
        identityKey: PublicKey;
        protocol: "algorand" | "ethereum" | "substrate" | "near" | "tezos" | "filecoin" | "mailchain";
    } | null>;
    resolve(address: string): Promise<{
        identityKey: PublicKey;
        protocol: ProtocolType;
    } | null>;
    reverse(identityKey: PublicKey): Promise<import("@mailchain/api").Address[]>;
}
