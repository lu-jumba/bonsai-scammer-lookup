/// <reference types="node" />
import { PrivateKey, ED25519ExtendedPrivateKey } from '@mailchain/crypto';
import { EncryptedPayload } from '../serialization/payload';
/**
 * Decrypt a payload
 *
 * @param input
 * @param payloadRootKey is used to derive a separate key for the headers and each part of the message
 * @returns
 */
export declare function decryptPayload(input: EncryptedPayload, payloadRootKey: ED25519ExtendedPrivateKey): Promise<{
    headers: Buffer;
    content: Buffer;
}>;
/**
 * Decrypt each chunk with the key derived from payloadRootKey
 * @param chunks chunks of max 1mb to decrypt
 * @param payloadRootKey root key used to derive encryption keys for each chunk
 * @returns list of decrypted chunks
 */
export declare function decryptChunks(chunks: Buffer[], payloadRootKey: ED25519ExtendedPrivateKey): Promise<Buffer[]>;
export declare function decryptBuffer(buffer: Buffer, key: PrivateKey): Promise<Buffer>;
