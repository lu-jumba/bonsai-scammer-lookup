/// <reference types="node" />
import { PrivateKey, RandomFunction, ED25519ExtendedPrivateKey } from '@mailchain/crypto';
import { EncryptedPayload } from '../serialization/payload';
/**
 * Encrypts a payload
 *
 * @param input
 * @param payloadRootKey is used to derive a separate key for the headers and each part of the message
 * @param chunkSize approx 1mb
 * @returns
 */
export declare function encryptPayload(headers: Buffer, content: Buffer, payloadRootKey: ED25519ExtendedPrivateKey, chunkSize?: number, rand?: RandomFunction): Promise<EncryptedPayload>;
/**
 * Encrypts each chunk with a different key derived from payloadRootKey
 * @param chunks chunks of max 1mb to encrypt
 * @param payloadRootKey root key used to derive encryption keys for each chunk
 * @returns list of encrypted chunks
 */
export declare function encryptChunks(chunks: Buffer[], payloadRootKey: ED25519ExtendedPrivateKey, rand?: RandomFunction): Promise<Buffer[]>;
export declare function encryptBuffer(buffer: Buffer, key: PrivateKey, rand?: RandomFunction): Promise<Buffer>;
