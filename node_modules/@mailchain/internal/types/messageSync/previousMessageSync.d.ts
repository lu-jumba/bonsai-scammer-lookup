import { KeyRingDecrypter } from '@mailchain/keyring/functions';
import { MessagingKeysApiInterface } from '@mailchain/api';
import { KeyRing } from '@mailchain/keyring';
import { IdentityKeys } from '../identityKeys';
import { Configuration } from '..';
import { UserMailbox } from '../user/types';
import { MessageSync, SyncResult } from './messageSync';
type Address = {
    protocol: string;
    address: string;
};
export type PrevSyncResult = SyncResult & {
    address: Address;
};
export declare class PreviousMessageSync {
    private readonly identityKeys;
    private readonly messagingKeysApiFactory;
    private readonly keyRing;
    private readonly messageSync;
    constructor(identityKeys: IdentityKeys, messagingKeysApiFactory: (messagingKey: KeyRingDecrypter) => MessagingKeysApiInterface, keyRing: KeyRing, messageSync: MessageSync);
    static create(sdkConfig: Configuration, keyRing: KeyRing, messageSync: MessageSync): PreviousMessageSync;
    sync(mailbox: UserMailbox): Promise<PrevSyncResult[]>;
}
export {};
