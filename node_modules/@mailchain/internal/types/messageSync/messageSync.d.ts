import { KeyRing } from '@mailchain/keyring';
import { KeyRingDecrypter } from '@mailchain/keyring/functions';
import { AxiosInstance } from 'axios';
import { MailReceiver } from '../receiving/mail';
import { Configuration } from '..';
import { MailboxOperations, MessagePreview } from '../mailbox';
import { UserMailbox } from '../user/types';
type SyncResultOk = {
    status: 'success';
    mailbox: UserMailbox;
    messages: MessagePreview[];
};
type SyncResultFailed = {
    status: 'fail';
    mailbox: UserMailbox;
    cause: Error;
};
export type SyncResult = SyncResultOk | SyncResultFailed;
export declare class MessageSync {
    private readonly sdkConfig;
    private readonly receiverFactory;
    private readonly keyRing;
    private readonly mailboxOperations;
    private readonly axiosInstance;
    constructor(sdkConfig: Configuration, receiverFactory: (typeof MailReceiver)['create'], keyRing: KeyRing, mailboxOperations: MailboxOperations, axiosInstance?: AxiosInstance);
    static create(sdkConfig: Configuration, keyRing: KeyRing, mailboxOperations: MailboxOperations, axiosInstance?: AxiosInstance): MessageSync;
    sync(mailboxes: UserMailbox[]): Promise<SyncResult[]>;
    private syncMailbox;
    syncWithMessagingKey(mailbox: UserMailbox, messagingKey: KeyRingDecrypter): Promise<SyncResult>;
}
export {};
