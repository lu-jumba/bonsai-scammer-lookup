import { Decrypter, Encrypter, PublicKey, SignerWithPublicKey } from '@mailchain/crypto';
import { Setting, UserApiInterface } from '@mailchain/api';
import { Configuration } from '../configuration';
import { UserMailboxMigrationRule } from './migrations';
import { UserMailbox } from './types';
export type UserSettings = {
    [key: string]: Setting | undefined;
};
export declare class UserNotFoundError extends Error {
    constructor();
}
export type NewUserMailbox = Omit<UserMailbox, 'id' | 'type'>;
export interface UserProfile {
    mailboxes(): Promise<[UserMailbox, ...UserMailbox[]]>;
    addMailbox(mailbox: NewUserMailbox): Promise<UserMailbox>;
    updateMailbox(mailboxId: string, mailbox: NewUserMailbox): Promise<UserMailbox>;
    removeMailbox(mailboxId: string): Promise<void>;
    getSettings(): Promise<UserSettings>;
    setSetting(key: string, value: string): Promise<void>;
    getUsername(): Promise<{
        username: string;
        address: string;
    }>;
}
export declare class MailchainUserProfile implements UserProfile {
    private readonly mailchainAddressDomain;
    private readonly userApi;
    private readonly accountIdentityKey;
    private readonly mailboxCrypto;
    private readonly migration;
    constructor(mailchainAddressDomain: string, userApi: UserApiInterface, accountIdentityKey: () => Promise<PublicKey>, mailboxCrypto: Encrypter & Decrypter, migration: UserMailboxMigrationRule);
    static create(config: Configuration, accountIdentityKey: SignerWithPublicKey, mailboxCrypto: Encrypter & Decrypter): MailchainUserProfile;
    getUsername(): Promise<{
        address: string;
        username: string;
    }>;
    setSetting(key: string, value: string): Promise<void>;
    getSettings(): Promise<UserSettings>;
    mailboxes(): Promise<[UserMailbox, ...UserMailbox[]]>;
    private accountMailbox;
    addMailbox(mailbox: NewUserMailbox): Promise<UserMailbox>;
    updateMailbox(mailboxId: string, mailbox: NewUserMailbox): Promise<UserMailbox>;
    removeMailbox(mailboxId: string): Promise<void>;
    private internalUpdateMailbox;
}
