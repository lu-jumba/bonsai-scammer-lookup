import { ED25519ExtendedPrivateKey, SignerWithPublicKey } from '@mailchain/crypto';
import { Configuration, TransportApiInterface } from '@mailchain/api';
import { MailchainResult } from '../..';
import { UnexpectedMailchainError } from '../../messagingKeys/errors';
import { Payload } from '../../transport';
export type SentPayload = {
    payloadUri: string;
    payloadRootEncryptionKey: ED25519ExtendedPrivateKey;
};
export type PreparePayloadParams = {
    payload: Payload;
};
export declare class PayloadSender {
    private readonly transportApi;
    constructor(transportApi: TransportApiInterface);
    static create(configuration: Configuration, accountKeySigner: SignerWithPublicKey): PayloadSender;
    /**
     * Encrypt the payload with ephemeral key and deliver it to the storage nodes.
     * @returns the URL to get the message from the and ephemeral key used for the encryption of it
     */
    sendPayload(payload: Payload): Promise<MailchainResult<SentPayload, UnexpectedMailchainError>>;
}
