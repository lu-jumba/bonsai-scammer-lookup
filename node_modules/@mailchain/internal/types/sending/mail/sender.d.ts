import { SignerWithPublicKey } from '@mailchain/crypto';
import { Configuration, MailchainResult } from '../..';
import { SendMailParams } from './sendMailParams';
import { MailPreparer, PrepareMailError } from './prepare';
import { DistributeMailError, MailDistributor } from './distributor';
import { SentMailDeliveryRequests } from './deliveryRequests';
/**
 * The result of sending a mail. This contains the delivery requests for each recipient in the mail.
 */
export type SentMail = {
    /**
     * The result of the delivery requests for each recipient in the mail.
     */
    sentMailDeliveryRequests: SentMailDeliveryRequests;
};
export type SendMailError = PrepareMailError | DistributeMailError;
export declare class MailSender {
    private readonly senderMessagingKey;
    private readonly mailPreparer;
    private readonly mailDistributor;
    constructor(senderMessagingKey: SignerWithPublicKey, mailPreparer: MailPreparer, mailDistributor: MailDistributor);
    static fromSenderMessagingKey(senderMessagingKey: SignerWithPublicKey, configuration?: Configuration): MailSender;
    /**
     * Send a mail to any blockchain or Mailchain address using the address Messaging Key.
     *
     * @param params {@link SendMailParams} - The parameters for sending a mail.
     * @returns
     */
    sendMail(params: SendMailParams): Promise<MailchainResult<SentMail, SendMailError>>;
}
