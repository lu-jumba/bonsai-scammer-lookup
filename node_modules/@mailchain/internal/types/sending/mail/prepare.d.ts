import { SignerWithPublicKey } from '@mailchain/crypto';
import { SenderMessagingKeyIncorrect } from '@mailchain/signatures';
import { Configuration, MailchainResult } from '../../';
import { MessagingKeys, ResolvedAddress, ResoleAddressesFailuresError } from '../../messagingKeys';
import { MailDistribution, MailData, Payload, MailSenderVerifier } from '../../transport';
import { PreflightCheckError } from '../errors';
export type PrepareMailParams = {
    message: MailData;
    senderMessagingKey: SignerWithPublicKey;
};
export type PreparedMail = {
    distributions: MailDistribution[];
    message: Payload;
    resolvedAddresses: Map<string, ResolvedAddress>;
};
export type PrepareMailError = PreflightCheckError | SenderMessagingKeyIncorrect | ResoleAddressesFailuresError;
export declare class MailPreparer {
    private readonly messagingKeys;
    private readonly mailSenderVerifier;
    constructor(messagingKeys: MessagingKeys, mailSenderVerifier: MailSenderVerifier);
    static create(configuration: Configuration): MailPreparer;
    prepareMail(params: PrepareMailParams): Promise<MailchainResult<PreparedMail, PrepareMailError>>;
}
