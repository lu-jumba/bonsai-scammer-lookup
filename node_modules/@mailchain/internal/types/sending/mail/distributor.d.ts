import { SignerWithPublicKey } from '@mailchain/crypto';
import { Configuration, MailchainResult } from '../../';
import { ResolvedAddress } from '../../messagingKeys';
import { MailDistribution } from '../../transport';
import { SentDeliveryRequest } from '../deliveryRequests';
import { MailPayloadSender, PrepareDistributionsError } from './payloadSender';
import { MailDeliveryRequests, SendMailDeliveryRequestsFailuresError } from './deliveryRequests';
export type DistributeMailError = PrepareDistributionsError | SendMailDeliveryRequestsFailuresError;
export type DistributeMailParams = {
    distributions: MailDistribution[];
    resolvedAddresses: Map<string, ResolvedAddress>;
};
export type DistributedMail = SentDeliveryRequest[];
export declare class MailDistributor {
    private readonly mailPayloadSender;
    private readonly mailDeliveryRequests;
    constructor(mailPayloadSender: MailPayloadSender, mailDeliveryRequests: MailDeliveryRequests);
    static create(configuration: Configuration, sender: SignerWithPublicKey): MailDistributor;
    distributeMail(params: DistributeMailParams): Promise<MailchainResult<DistributedMail, DistributeMailError>>;
}
