import { KeyRing, InboxKey } from '@mailchain/keyring';
import { InboxApiInterface } from '@mailchain/api';
import { MailData, Payload } from '../transport';
import { Configuration } from '..';
import { UserMailbox } from '../user/types';
import { AddressesHasher } from './addressHasher';
import { MessageIdCreator } from './messageId';
import { MessageCrypto } from './messageCrypto';
import { MessagePreview, UserMessageLabel, Message } from './types';
import { UserMailboxHasher } from './userMailboxHasher';
import { MessageMailboxOwnerMatcher } from './messageMailboxOwnerMatcher';
import { MessagePreviewMigrationRule } from './migrations';
type SaveSentMessageParam = {
    /** The {@link UserMailbox} that is sending this message */
    userMailbox: UserMailbox;
    payload: Payload;
    content: MailData;
};
type SaveReceivedMessageParam = {
    /** The {@link UserMailbox} that is receiving this message */
    userMailbox: UserMailbox;
    receivedTransportPayload: Payload;
};
export interface MailboxOperations {
    /** Get {@link MessagePreview} for a single message. */
    getMessage(messageId: string): Promise<MessagePreview>;
    /** Get messages from the Inbox folder (with INBOX label) */
    getInboxMessages(): Promise<MessagePreview[]>;
    /** Get messages from the Starred folder (with STARRED label) */
    getStarredMessages(): Promise<MessagePreview[]>;
    /** Get messages from the Trash folder (with TRASH label) */
    getTrashMessages(): Promise<MessagePreview[]>;
    /** Get messages from the Unread folder (without READ label) */
    getUnreadMessages(): Promise<MessagePreview[]>;
    /** Get messages from the Send folder (with SEND label) */
    getSentMessages(): Promise<MessagePreview[]>;
    /** Get messages from the Outbox folder */
    getOutboxMessages(): Promise<MessagePreview[]>;
    /** Get messages from the Archived folder (with ARCHIVED label) */
    getArchivedMessages(): Promise<MessagePreview[]>;
    searchMessages(): Promise<MessagePreview[]>;
    /** Get the full contents of the single message for the provided ID (same as the {@link MessagePreview.id}) */
    getFullMessage(messageId: string): Promise<Message>;
    /**
     * Save the send message
     *
     * Note: initially the message is put into Outbox folder and needs to me marked as send via {@link MailboxOperations.markOutboxMessageAsSent}
     */
    saveSentMessage(message: SaveSentMessageParam): Promise<MessagePreview>;
    /** Save the received message. */
    saveReceivedMessage(message: SaveReceivedMessageParam): Promise<[MessagePreview, ...MessagePreview[]]>;
    markOutboxMessageAsSent(messageId: string): Promise<void>;
    modifyArchiveMessage(messageId: string, archived: boolean): Promise<void>;
    modifyIsReadMessage(messageId: string, isRead: boolean): Promise<void>;
    modifyTrashMessage(messageId: string, trash: boolean): Promise<void>;
    modifyStarredMessage(messageId: string, isStarred: boolean): Promise<void>;
    modifyUserLabel(messageId: string, userLabel: UserMessageLabel, include: boolean): Promise<void>;
}
export declare class MailchainMailboxOperations implements MailboxOperations {
    private readonly inboxApi;
    private readonly messagePreviewCrypto;
    private readonly messageCrypto;
    private readonly messageMailboxOwnerMatcher;
    private readonly addressHasher;
    private readonly messageIdCreator;
    private readonly userMailboxHasher;
    private readonly messageDateOffset;
    private readonly migration;
    constructor(inboxApi: InboxApiInterface, messagePreviewCrypto: InboxKey, messageCrypto: MessageCrypto, messageMailboxOwnerMatcher: MessageMailboxOwnerMatcher, addressHasher: AddressesHasher, messageIdCreator: MessageIdCreator, userMailboxHasher: UserMailboxHasher, messageDateOffset: number, migration: MessagePreviewMigrationRule);
    static create(sdkConfig: Configuration, keyRing: KeyRing): MailboxOperations;
    getMessage(messageId: string): Promise<MessagePreview>;
    getInboxMessages(): Promise<MessagePreview[]>;
    getStarredMessages(): Promise<MessagePreview[]>;
    getTrashMessages(): Promise<MessagePreview[]>;
    getUnreadMessages(): Promise<MessagePreview[]>;
    getSentMessages(): Promise<MessagePreview[]>;
    getOutboxMessages(): Promise<MessagePreview[]>;
    getArchivedMessages(): Promise<MessagePreview[]>;
    searchMessages(): Promise<MessagePreview[]>;
    private handleMessagePreviews;
    private handleMessagePreview;
    getFullMessage(messageId: string): Promise<Message>;
    saveSentMessage(params: SaveSentMessageParam): Promise<MessagePreview>;
    saveReceivedMessage({ userMailbox, receivedTransportPayload, }: SaveReceivedMessageParam): Promise<[MessagePreview, ...MessagePreview[]]>;
    private saveMessage;
    markOutboxMessageAsSent(messageId: string): Promise<void>;
    modifyArchiveMessage(messageId: string, archived: boolean): Promise<void>;
    modifyIsReadMessage(messageId: string, isRead: boolean): Promise<void>;
    modifyTrashMessage(messageId: string, trash: boolean): Promise<void>;
    modifyStarredMessage(messageId: string, isStarred: boolean): Promise<void>;
    private modifySystemLabel;
    modifyUserLabel(messageId: string, userLabel: UserMessageLabel, include: boolean): Promise<void>;
}
export {};
