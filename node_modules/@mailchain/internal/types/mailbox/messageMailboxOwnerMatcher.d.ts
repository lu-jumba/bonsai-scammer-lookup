import { MailchainAddress } from '@mailchain/addressing';
import { Configuration } from '../configuration';
import { MailData } from '../transport';
import { ParseMimeTextResult } from '../formatters/parse';
import { UserMailbox } from '../user/types';
import { AddressIdentityKeyResolver } from './addressIdentityKeyResolver';
/** Result of the {@link MessageMailboxOwnerMatcher.findMatches}. */
export type AddressMatch = {
    /** The matched address */
    address: MailchainAddress;
    /** How this address was matched */
    matchBy: 'fallback' | 'message-header' | 'mailchain-api';
};
export declare class MessageMailboxOwnerMatcher {
    private readonly addressIdentityKeyResolvers;
    constructor(addressIdentityKeyResolvers: [AddressMatch['matchBy'], AddressIdentityKeyResolver][]);
    /** Create {@link MessageMailboxOwnerMatcher} with {@link createMailchainApiAddressIdentityKeyResolver} as default resolver.  */
    static create(config: Configuration): MessageMailboxOwnerMatcher;
    /**
     * Build new {@link MessageMailboxOwnerMatcher} with an additional identity key resolver {@link createMessageHeaderIdentityKeyResolver}.
     *
     * Note: this doesn't modify the original {@link MessageMailboxOwnerMatcher}.
     */
    withMessageIdentityKeys(addressIdentityKeys: ParseMimeTextResult['addressIdentityKeys']): MessageMailboxOwnerMatcher;
    /** Find the matching {@link Alias} from the provided `mailData` that match to the `userMailbox`. */
    findMatches(mailData: MailData, userMailbox: UserMailbox): Promise<AddressMatch[]>;
}
