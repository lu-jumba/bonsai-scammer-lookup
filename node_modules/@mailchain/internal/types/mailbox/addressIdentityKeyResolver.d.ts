import { MailchainAddress, ProtocolType } from '@mailchain/addressing';
import { PublicKey } from '@mailchain/crypto';
import { IdentityKeys } from '../identityKeys';
import { ParseMimeTextResult } from '../formatters/parse';
type Resolved = {
    identityKey: PublicKey;
    protocol: ProtocolType;
};
/** Resolve the `IdentityKey` for the provided `address`. Returns `null` if no key was found for the provided address. */
export type AddressIdentityKeyResolver = (address: MailchainAddress) => Promise<Resolved | null>;
/** Create {@link AddressIdentityKeyResolver} that resolved identity keys by using the Mailchain API.  */
export declare function createMailchainApiAddressIdentityKeyResolver(identityKeys: IdentityKeys): AddressIdentityKeyResolver;
/** Create {@link AddressIdentityKeyResolver} that resolves by using mappings of address->IdentityKey that is part of {@link ParseMimeTextResult} with the `X-IdentityKeys` header.  */
export declare function createMessageHeaderIdentityKeyResolver(addressIdentityKeys: ParseMimeTextResult['addressIdentityKeys']): AddressIdentityKeyResolver;
export {};
