/// <reference types="node" />
import { PublicKey } from '@mailchain/crypto';
import { MailerContent } from '../../transport';
import { SerializablePayloadHeaders } from '../../transport/serialization';
type ContentType = 'application/json' | 'message/x.mailchain' | 'message/x.mailchain-mailer';
/**
 * MailPayloadHeaders are the headers provide information about the payload.
 */
export type MailPayloadHeaders = {
    /**
     * public key of sender to verify the contents
     */
    Origin: PublicKey;
    /**
     * used to verify un-encrypted contents
     */
    ContentSignature: Uint8Array;
    Created: Date;
    /**
     * The size of the resource, in decimal number of bytes.
     * The Content-Length header indicates the size of the message body, in bytes, sent to the recipient.
     */
    ContentLength: number;
    /**
     * Indicates the media type of the resource.
     * The ContentType representation header is used to indicate the original media type of the resource (prior to any content encoding and encryption applied for sending).
     * In responses, a ContentType header provides the client with the actual content type of the returned content.
     */
    ContentType: ContentType;
    /**
     * Used to specify the compression algorithm.
     */
    ContentEncoding: string;
    /**
     * Used to specify the encryption algorithm.
     */
    ContentEncryption: string;
    /**
     * Stores original Mailer Payload when the Mail was sent with Mailer.
     */
    MailerContent?: MailerContent;
};
export declare class SerializableMailPayloadHeaders implements SerializablePayloadHeaders {
    headers: MailPayloadHeaders;
    constructor(headers: MailPayloadHeaders);
    static FromEncryptedMailPayloadHeaders(headers: MailPayloadHeaders): SerializableMailPayloadHeaders;
    static FromBuffer(buffer: Buffer): SerializableMailPayloadHeaders;
    ToBuffer(): Buffer;
}
export {};
