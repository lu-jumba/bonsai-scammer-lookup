import * as $protobuf from "protobufjs";
import Long = require("long");
/** Namespace user. */
export namespace user {

    /** Properties of a Mailbox. */
    interface IMailbox {

        /** Mailbox address */
        address?: (Uint8Array|null);

        /** Mailbox nonce */
        nonce?: (number|null);

        /** Mailbox protocol */
        protocol?: (string|null);

        /** Mailbox network */
        network?: (string|null);

        /** Mailbox identityKey */
        identityKey?: (Uint8Array|null);

        /** Mailbox label */
        label?: (string|null);

        /** Mailbox aliases */
        aliases?: (user.Mailbox.IAlias[]|null);
    }

    /** Represents a Mailbox. */
    class Mailbox implements IMailbox {

        /**
         * Constructs a new Mailbox.
         * @param [properties] Properties to set
         */
        constructor(properties?: user.IMailbox);

        /** Mailbox address. */
        public address: Uint8Array;

        /** Mailbox nonce. */
        public nonce: number;

        /** Mailbox protocol. */
        public protocol: string;

        /** Mailbox network. */
        public network: string;

        /** Mailbox identityKey. */
        public identityKey: Uint8Array;

        /** Mailbox label. */
        public label?: (string|null);

        /** Mailbox aliases. */
        public aliases: user.Mailbox.IAlias[];

        /** Mailbox _label. */
        public _label?: "label";

        /**
         * Creates a new Mailbox instance using the specified properties.
         * @param [properties] Properties to set
         * @returns Mailbox instance
         */
        public static create(properties?: user.IMailbox): user.Mailbox;

        /**
         * Encodes the specified Mailbox message. Does not implicitly {@link user.Mailbox.verify|verify} messages.
         * @param message Mailbox message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encode(message: user.IMailbox, writer?: $protobuf.Writer): $protobuf.Writer;

        /**
         * Encodes the specified Mailbox message, length delimited. Does not implicitly {@link user.Mailbox.verify|verify} messages.
         * @param message Mailbox message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encodeDelimited(message: user.IMailbox, writer?: $protobuf.Writer): $protobuf.Writer;

        /**
         * Decodes a Mailbox message from the specified reader or buffer.
         * @param reader Reader or buffer to decode from
         * @param [length] Message length if known beforehand
         * @returns Mailbox
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): user.Mailbox;

        /**
         * Decodes a Mailbox message from the specified reader or buffer, length delimited.
         * @param reader Reader or buffer to decode from
         * @returns Mailbox
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): user.Mailbox;

        /**
         * Verifies a Mailbox message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): (string|null);

        /**
         * Creates a Mailbox message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns Mailbox
         */
        public static fromObject(object: { [k: string]: any }): user.Mailbox;

        /**
         * Creates a plain object from a Mailbox message. Also converts values to other types if specified.
         * @param message Mailbox
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(message: user.Mailbox, options?: $protobuf.IConversionOptions): { [k: string]: any };

        /**
         * Converts this Mailbox to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any };

        /**
         * Gets the default type url for Mailbox
         * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns The default type url
         */
        public static getTypeUrl(typeUrlPrefix?: string): string;
    }

    namespace Mailbox {

        /** Properties of an Alias. */
        interface IAlias {

            /** Alias address */
            address?: (string|null);

            /** Alias blockSending */
            blockSending?: (boolean|null);

            /** Alias blockReceiving */
            blockReceiving?: (boolean|null);
        }

        /** Represents an Alias. */
        class Alias implements IAlias {

            /**
             * Constructs a new Alias.
             * @param [properties] Properties to set
             */
            constructor(properties?: user.Mailbox.IAlias);

            /** Alias address. */
            public address: string;

            /** Alias blockSending. */
            public blockSending: boolean;

            /** Alias blockReceiving. */
            public blockReceiving: boolean;

            /**
             * Creates a new Alias instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Alias instance
             */
            public static create(properties?: user.Mailbox.IAlias): user.Mailbox.Alias;

            /**
             * Encodes the specified Alias message. Does not implicitly {@link user.Mailbox.Alias.verify|verify} messages.
             * @param message Alias message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: user.Mailbox.IAlias, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Alias message, length delimited. Does not implicitly {@link user.Mailbox.Alias.verify|verify} messages.
             * @param message Alias message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: user.Mailbox.IAlias, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an Alias message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Alias
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): user.Mailbox.Alias;

            /**
             * Decodes an Alias message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Alias
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): user.Mailbox.Alias;

            /**
             * Verifies an Alias message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an Alias message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Alias
             */
            public static fromObject(object: { [k: string]: any }): user.Mailbox.Alias;

            /**
             * Creates a plain object from an Alias message. Also converts values to other types if specified.
             * @param message Alias
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: user.Mailbox.Alias, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Alias to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };

            /**
             * Gets the default type url for Alias
             * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns The default type url
             */
            public static getTypeUrl(typeUrlPrefix?: string): string;
        }
    }
}
