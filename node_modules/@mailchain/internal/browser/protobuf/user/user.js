import * as $protobuf from 'protobufjs/minimal';

/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/

// Common aliases
const $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;

// Exported root namespace
const $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});

const user = $root.user = (() => {

    /**
     * Namespace user.
     * @exports user
     * @namespace
     */
    const user = {};

    user.Mailbox = (function() {

        /**
         * Properties of a Mailbox.
         * @memberof user
         * @interface IMailbox
         * @property {Uint8Array|null} [address] Mailbox address
         * @property {number|null} [nonce] Mailbox nonce
         * @property {string|null} [protocol] Mailbox protocol
         * @property {string|null} [network] Mailbox network
         * @property {Uint8Array|null} [identityKey] Mailbox identityKey
         * @property {string|null} [label] Mailbox label
         * @property {Array.<user.Mailbox.IAlias>|null} [aliases] Mailbox aliases
         */

        /**
         * Constructs a new Mailbox.
         * @memberof user
         * @classdesc Represents a Mailbox.
         * @implements IMailbox
         * @constructor
         * @param {user.IMailbox=} [properties] Properties to set
         */
        function Mailbox(properties) {
            this.aliases = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Mailbox address.
         * @member {Uint8Array} address
         * @memberof user.Mailbox
         * @instance
         */
        Mailbox.prototype.address = $util.newBuffer([]);

        /**
         * Mailbox nonce.
         * @member {number} nonce
         * @memberof user.Mailbox
         * @instance
         */
        Mailbox.prototype.nonce = 0;

        /**
         * Mailbox protocol.
         * @member {string} protocol
         * @memberof user.Mailbox
         * @instance
         */
        Mailbox.prototype.protocol = "";

        /**
         * Mailbox network.
         * @member {string} network
         * @memberof user.Mailbox
         * @instance
         */
        Mailbox.prototype.network = "";

        /**
         * Mailbox identityKey.
         * @member {Uint8Array} identityKey
         * @memberof user.Mailbox
         * @instance
         */
        Mailbox.prototype.identityKey = $util.newBuffer([]);

        /**
         * Mailbox label.
         * @member {string|null|undefined} label
         * @memberof user.Mailbox
         * @instance
         */
        Mailbox.prototype.label = null;

        /**
         * Mailbox aliases.
         * @member {Array.<user.Mailbox.IAlias>} aliases
         * @memberof user.Mailbox
         * @instance
         */
        Mailbox.prototype.aliases = $util.emptyArray;

        // OneOf field names bound to virtual getters and setters
        let $oneOfFields;

        /**
         * Mailbox _label.
         * @member {"label"|undefined} _label
         * @memberof user.Mailbox
         * @instance
         */
        Object.defineProperty(Mailbox.prototype, "_label", {
            get: $util.oneOfGetter($oneOfFields = ["label"]),
            set: $util.oneOfSetter($oneOfFields)
        });

        /**
         * Creates a new Mailbox instance using the specified properties.
         * @function create
         * @memberof user.Mailbox
         * @static
         * @param {user.IMailbox=} [properties] Properties to set
         * @returns {user.Mailbox} Mailbox instance
         */
        Mailbox.create = function create(properties) {
            return new Mailbox(properties);
        };

        /**
         * Encodes the specified Mailbox message. Does not implicitly {@link user.Mailbox.verify|verify} messages.
         * @function encode
         * @memberof user.Mailbox
         * @static
         * @param {user.IMailbox} message Mailbox message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Mailbox.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.address != null && Object.hasOwnProperty.call(message, "address"))
                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.address);
            if (message.nonce != null && Object.hasOwnProperty.call(message, "nonce"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.nonce);
            if (message.protocol != null && Object.hasOwnProperty.call(message, "protocol"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.protocol);
            if (message.network != null && Object.hasOwnProperty.call(message, "network"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.network);
            if (message.identityKey != null && Object.hasOwnProperty.call(message, "identityKey"))
                writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.identityKey);
            if (message.label != null && Object.hasOwnProperty.call(message, "label"))
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.label);
            if (message.aliases != null && message.aliases.length)
                for (let i = 0; i < message.aliases.length; ++i)
                    $root.user.Mailbox.Alias.encode(message.aliases[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified Mailbox message, length delimited. Does not implicitly {@link user.Mailbox.verify|verify} messages.
         * @function encodeDelimited
         * @memberof user.Mailbox
         * @static
         * @param {user.IMailbox} message Mailbox message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Mailbox.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a Mailbox message from the specified reader or buffer.
         * @function decode
         * @memberof user.Mailbox
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {user.Mailbox} Mailbox
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Mailbox.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.user.Mailbox();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.address = reader.bytes();
                        break;
                    }
                case 2: {
                        message.nonce = reader.uint32();
                        break;
                    }
                case 3: {
                        message.protocol = reader.string();
                        break;
                    }
                case 4: {
                        message.network = reader.string();
                        break;
                    }
                case 5: {
                        message.identityKey = reader.bytes();
                        break;
                    }
                case 6: {
                        message.label = reader.string();
                        break;
                    }
                case 7: {
                        if (!(message.aliases && message.aliases.length))
                            message.aliases = [];
                        message.aliases.push($root.user.Mailbox.Alias.decode(reader, reader.uint32()));
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a Mailbox message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof user.Mailbox
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {user.Mailbox} Mailbox
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Mailbox.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a Mailbox message.
         * @function verify
         * @memberof user.Mailbox
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Mailbox.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.address != null && message.hasOwnProperty("address"))
                if (!(message.address && typeof message.address.length === "number" || $util.isString(message.address)))
                    return "address: buffer expected";
            if (message.nonce != null && message.hasOwnProperty("nonce"))
                if (!$util.isInteger(message.nonce))
                    return "nonce: integer expected";
            if (message.protocol != null && message.hasOwnProperty("protocol"))
                if (!$util.isString(message.protocol))
                    return "protocol: string expected";
            if (message.network != null && message.hasOwnProperty("network"))
                if (!$util.isString(message.network))
                    return "network: string expected";
            if (message.identityKey != null && message.hasOwnProperty("identityKey"))
                if (!(message.identityKey && typeof message.identityKey.length === "number" || $util.isString(message.identityKey)))
                    return "identityKey: buffer expected";
            if (message.label != null && message.hasOwnProperty("label")) {
                if (!$util.isString(message.label))
                    return "label: string expected";
            }
            if (message.aliases != null && message.hasOwnProperty("aliases")) {
                if (!Array.isArray(message.aliases))
                    return "aliases: array expected";
                for (let i = 0; i < message.aliases.length; ++i) {
                    let error = $root.user.Mailbox.Alias.verify(message.aliases[i]);
                    if (error)
                        return "aliases." + error;
                }
            }
            return null;
        };

        /**
         * Creates a Mailbox message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof user.Mailbox
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {user.Mailbox} Mailbox
         */
        Mailbox.fromObject = function fromObject(object) {
            if (object instanceof $root.user.Mailbox)
                return object;
            let message = new $root.user.Mailbox();
            if (object.address != null)
                if (typeof object.address === "string")
                    $util.base64.decode(object.address, message.address = $util.newBuffer($util.base64.length(object.address)), 0);
                else if (object.address.length >= 0)
                    message.address = object.address;
            if (object.nonce != null)
                message.nonce = object.nonce >>> 0;
            if (object.protocol != null)
                message.protocol = String(object.protocol);
            if (object.network != null)
                message.network = String(object.network);
            if (object.identityKey != null)
                if (typeof object.identityKey === "string")
                    $util.base64.decode(object.identityKey, message.identityKey = $util.newBuffer($util.base64.length(object.identityKey)), 0);
                else if (object.identityKey.length >= 0)
                    message.identityKey = object.identityKey;
            if (object.label != null)
                message.label = String(object.label);
            if (object.aliases) {
                if (!Array.isArray(object.aliases))
                    throw TypeError(".user.Mailbox.aliases: array expected");
                message.aliases = [];
                for (let i = 0; i < object.aliases.length; ++i) {
                    if (typeof object.aliases[i] !== "object")
                        throw TypeError(".user.Mailbox.aliases: object expected");
                    message.aliases[i] = $root.user.Mailbox.Alias.fromObject(object.aliases[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a Mailbox message. Also converts values to other types if specified.
         * @function toObject
         * @memberof user.Mailbox
         * @static
         * @param {user.Mailbox} message Mailbox
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Mailbox.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.arrays || options.defaults)
                object.aliases = [];
            if (options.defaults) {
                if (options.bytes === String)
                    object.address = "";
                else {
                    object.address = [];
                    if (options.bytes !== Array)
                        object.address = $util.newBuffer(object.address);
                }
                object.nonce = 0;
                object.protocol = "";
                object.network = "";
                if (options.bytes === String)
                    object.identityKey = "";
                else {
                    object.identityKey = [];
                    if (options.bytes !== Array)
                        object.identityKey = $util.newBuffer(object.identityKey);
                }
            }
            if (message.address != null && message.hasOwnProperty("address"))
                object.address = options.bytes === String ? $util.base64.encode(message.address, 0, message.address.length) : options.bytes === Array ? Array.prototype.slice.call(message.address) : message.address;
            if (message.nonce != null && message.hasOwnProperty("nonce"))
                object.nonce = message.nonce;
            if (message.protocol != null && message.hasOwnProperty("protocol"))
                object.protocol = message.protocol;
            if (message.network != null && message.hasOwnProperty("network"))
                object.network = message.network;
            if (message.identityKey != null && message.hasOwnProperty("identityKey"))
                object.identityKey = options.bytes === String ? $util.base64.encode(message.identityKey, 0, message.identityKey.length) : options.bytes === Array ? Array.prototype.slice.call(message.identityKey) : message.identityKey;
            if (message.label != null && message.hasOwnProperty("label")) {
                object.label = message.label;
                if (options.oneofs)
                    object._label = "label";
            }
            if (message.aliases && message.aliases.length) {
                object.aliases = [];
                for (let j = 0; j < message.aliases.length; ++j)
                    object.aliases[j] = $root.user.Mailbox.Alias.toObject(message.aliases[j], options);
            }
            return object;
        };

        /**
         * Converts this Mailbox to JSON.
         * @function toJSON
         * @memberof user.Mailbox
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Mailbox.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for Mailbox
         * @function getTypeUrl
         * @memberof user.Mailbox
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        Mailbox.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/user.Mailbox";
        };

        Mailbox.Alias = (function() {

            /**
             * Properties of an Alias.
             * @memberof user.Mailbox
             * @interface IAlias
             * @property {string|null} [address] Alias address
             * @property {boolean|null} [blockSending] Alias blockSending
             * @property {boolean|null} [blockReceiving] Alias blockReceiving
             */

            /**
             * Constructs a new Alias.
             * @memberof user.Mailbox
             * @classdesc Represents an Alias.
             * @implements IAlias
             * @constructor
             * @param {user.Mailbox.IAlias=} [properties] Properties to set
             */
            function Alias(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Alias address.
             * @member {string} address
             * @memberof user.Mailbox.Alias
             * @instance
             */
            Alias.prototype.address = "";

            /**
             * Alias blockSending.
             * @member {boolean} blockSending
             * @memberof user.Mailbox.Alias
             * @instance
             */
            Alias.prototype.blockSending = false;

            /**
             * Alias blockReceiving.
             * @member {boolean} blockReceiving
             * @memberof user.Mailbox.Alias
             * @instance
             */
            Alias.prototype.blockReceiving = false;

            /**
             * Creates a new Alias instance using the specified properties.
             * @function create
             * @memberof user.Mailbox.Alias
             * @static
             * @param {user.Mailbox.IAlias=} [properties] Properties to set
             * @returns {user.Mailbox.Alias} Alias instance
             */
            Alias.create = function create(properties) {
                return new Alias(properties);
            };

            /**
             * Encodes the specified Alias message. Does not implicitly {@link user.Mailbox.Alias.verify|verify} messages.
             * @function encode
             * @memberof user.Mailbox.Alias
             * @static
             * @param {user.Mailbox.IAlias} message Alias message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Alias.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.address != null && Object.hasOwnProperty.call(message, "address"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.address);
                if (message.blockSending != null && Object.hasOwnProperty.call(message, "blockSending"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.blockSending);
                if (message.blockReceiving != null && Object.hasOwnProperty.call(message, "blockReceiving"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.blockReceiving);
                return writer;
            };

            /**
             * Encodes the specified Alias message, length delimited. Does not implicitly {@link user.Mailbox.Alias.verify|verify} messages.
             * @function encodeDelimited
             * @memberof user.Mailbox.Alias
             * @static
             * @param {user.Mailbox.IAlias} message Alias message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Alias.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an Alias message from the specified reader or buffer.
             * @function decode
             * @memberof user.Mailbox.Alias
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {user.Mailbox.Alias} Alias
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Alias.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.user.Mailbox.Alias();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.address = reader.string();
                            break;
                        }
                    case 2: {
                            message.blockSending = reader.bool();
                            break;
                        }
                    case 3: {
                            message.blockReceiving = reader.bool();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an Alias message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof user.Mailbox.Alias
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {user.Mailbox.Alias} Alias
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Alias.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an Alias message.
             * @function verify
             * @memberof user.Mailbox.Alias
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Alias.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.address != null && message.hasOwnProperty("address"))
                    if (!$util.isString(message.address))
                        return "address: string expected";
                if (message.blockSending != null && message.hasOwnProperty("blockSending"))
                    if (typeof message.blockSending !== "boolean")
                        return "blockSending: boolean expected";
                if (message.blockReceiving != null && message.hasOwnProperty("blockReceiving"))
                    if (typeof message.blockReceiving !== "boolean")
                        return "blockReceiving: boolean expected";
                return null;
            };

            /**
             * Creates an Alias message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof user.Mailbox.Alias
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {user.Mailbox.Alias} Alias
             */
            Alias.fromObject = function fromObject(object) {
                if (object instanceof $root.user.Mailbox.Alias)
                    return object;
                let message = new $root.user.Mailbox.Alias();
                if (object.address != null)
                    message.address = String(object.address);
                if (object.blockSending != null)
                    message.blockSending = Boolean(object.blockSending);
                if (object.blockReceiving != null)
                    message.blockReceiving = Boolean(object.blockReceiving);
                return message;
            };

            /**
             * Creates a plain object from an Alias message. Also converts values to other types if specified.
             * @function toObject
             * @memberof user.Mailbox.Alias
             * @static
             * @param {user.Mailbox.Alias} message Alias
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Alias.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.address = "";
                    object.blockSending = false;
                    object.blockReceiving = false;
                }
                if (message.address != null && message.hasOwnProperty("address"))
                    object.address = message.address;
                if (message.blockSending != null && message.hasOwnProperty("blockSending"))
                    object.blockSending = message.blockSending;
                if (message.blockReceiving != null && message.hasOwnProperty("blockReceiving"))
                    object.blockReceiving = message.blockReceiving;
                return object;
            };

            /**
             * Converts this Alias to JSON.
             * @function toJSON
             * @memberof user.Mailbox.Alias
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Alias.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for Alias
             * @function getTypeUrl
             * @memberof user.Mailbox.Alias
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            Alias.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/user.Mailbox.Alias";
            };

            return Alias;
        })();

        return Mailbox;
    })();

    return user;
})();

export { $root as default, user };
