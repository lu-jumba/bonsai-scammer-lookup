import { MailPayloadSender } from './payloadSender.js';
import { MailDeliveryRequests } from './deliveryRequests.js';

class MailDistributor {
    constructor(mailPayloadSender, mailDeliveryRequests) {
        Object.defineProperty(this, "mailPayloadSender", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: mailPayloadSender
        });
        Object.defineProperty(this, "mailDeliveryRequests", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: mailDeliveryRequests
        });
    }
    static create(configuration, sender) {
        return new MailDistributor(MailPayloadSender.create(configuration, sender), MailDeliveryRequests.create(configuration, sender));
    }
    async distributeMail(params) {
        const { data: preparedDistributions, error: prepareDistributionsError } = await this.mailPayloadSender.prepareDistributions(params.distributions);
        if (prepareDistributionsError) {
            return { error: prepareDistributionsError };
        }
        const { data: sentMailDeliveryRequests, error: sendMailDeliveryRequestsError } = await this.mailDeliveryRequests.sendMailDeliveryRequests({
            distributions: preparedDistributions,
            resolvedAddresses: params.resolvedAddresses,
        });
        if (sendMailDeliveryRequestsError) {
            return { error: sendMailDeliveryRequestsError };
        }
        return {
            data: sentMailDeliveryRequests,
        };
    }
}

export { MailDistributor };
