import { publicKeyToBytes } from '@mailchain/crypto';
import { ED25519PublicKeyLen, ED25519PublicKey } from '@mailchain/crypto/ed25519';
import { SECP256K1PublicKeyLength, SECP256K1PublicKey } from '@mailchain/crypto/secp256k1/public';
import { parseNameServiceAddress, isMailchainAccountAddress } from '@mailchain/addressing';
import { preview } from '../protobuf/inbox/inbox.js';
import { combineMigrations } from '../migration.js';
import { IdentityKeys } from '../identityKeys/identityKeys.js';

function getAllMessagePreviewMigrations(sdkConfig) {
    const identityKeys = IdentityKeys.create(sdkConfig);
    return combineMigrations(createV2IdentityKey(identityKeys), createV3EncodeIdentityKey());
}
function createV2IdentityKey(identityKeys) {
    return {
        shouldApply: (data) => Promise.resolve(data.version === 1),
        apply: async (data) => {
            const result = await identityKeys.getAddressIdentityKey(parseNameServiceAddress(data.messagePreview.owner));
            if (result == null)
                throw new Error(`no identity key found for [${data.messagePreview.owner}], failed message migration`);
            return {
                version: 2,
                messagePreview: preview.MessagePreview.create({
                    ...data.messagePreview,
                    mailbox: result.identityKey.bytes,
                }),
            };
        },
    };
}
function createV3EncodeIdentityKey() {
    return {
        shouldApply: (data) => Promise.resolve(data.version === 2),
        apply: async (data) => {
            const { messagePreview } = data;
            const owner = parseNameServiceAddress(messagePreview.owner);
            let mailboxIdentityKey = null;
            if (messagePreview.mailbox.length === ED25519PublicKeyLen && isMailchainAccountAddress(owner)) {
                // ed25519 keys are only used for Mailchain accounts as of v2
                // should also check protocol
                mailboxIdentityKey = new ED25519PublicKey(messagePreview.mailbox);
            }
            else if (messagePreview.mailbox.length === SECP256K1PublicKeyLength) {
                mailboxIdentityKey = new SECP256K1PublicKey(messagePreview.mailbox);
            }
            if (mailboxIdentityKey == null)
                throw new Error(`failed message migration, failed mailbox identity key resolution`);
            return {
                version: 3,
                messagePreview: preview.MessagePreview.create({
                    ...messagePreview,
                    mailbox: publicKeyToBytes(mailboxIdentityKey),
                }),
            };
        },
    };
}

export { createV2IdentityKey, createV3EncodeIdentityKey, getAllMessagePreviewMigrations };
