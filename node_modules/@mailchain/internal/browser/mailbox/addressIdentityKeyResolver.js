import { formatAddress, decodeAddressByProtocol, addressFromPublicKey } from '@mailchain/addressing';
import isEqual from 'lodash/isEqual';

/** Create {@link AddressIdentityKeyResolver} that resolved identity keys by using the Mailchain API.  */
function createMailchainApiAddressIdentityKeyResolver(identityKeys) {
    return (address) => identityKeys.getAddressIdentityKey(address);
}
/** Create {@link AddressIdentityKeyResolver} that resolves by using mappings of address->IdentityKey that is part of {@link ParseMimeTextResult} with the `X-IdentityKeys` header.  */
function createMessageHeaderIdentityKeyResolver(addressIdentityKeys) {
    return async (address) => {
        const entry = addressIdentityKeys.get(formatAddress(address, 'mail'));
        if (entry == null)
            return null;
        try {
            const actualAddressBytes = decodeAddressByProtocol(address.username, entry.protocol).decoded;
            const expectedAddressBytes = await addressFromPublicKey(entry.identityKey, entry.protocol);
            if (isEqual(expectedAddressBytes, actualAddressBytes))
                return entry;
        }
        catch (e) {
            // failed processing address, ignore it and don't return the key
        }
        return null;
    };
}

export { createMailchainApiAddressIdentityKeyResolver, createMessageHeaderIdentityKeyResolver };
