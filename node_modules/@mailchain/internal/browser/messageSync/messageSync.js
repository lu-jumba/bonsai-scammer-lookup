import { encodeHex } from '@mailchain/encoding';
import axios from 'axios';
import { MailReceiver } from '../receiving/mail/mail.js';

class MessageSync {
    constructor(sdkConfig, receiverFactory, keyRing, mailboxOperations, axiosInstance = axios.create()) {
        Object.defineProperty(this, "sdkConfig", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: sdkConfig
        });
        Object.defineProperty(this, "receiverFactory", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: receiverFactory
        });
        Object.defineProperty(this, "keyRing", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: keyRing
        });
        Object.defineProperty(this, "mailboxOperations", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: mailboxOperations
        });
        Object.defineProperty(this, "axiosInstance", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: axiosInstance
        });
    }
    static create(sdkConfig, keyRing, mailboxOperations, axiosInstance = axios.create()) {
        return new MessageSync(sdkConfig, MailReceiver.create, keyRing, mailboxOperations, axiosInstance);
    }
    async sync(mailboxes) {
        return Promise.all(mailboxes.map((mailbox) => this.syncMailbox(mailbox).catch((cause) => ({ status: 'fail', mailbox, cause }))));
    }
    async syncMailbox(mailbox) {
        const messagingKey = this.keyRing.addressBytesMessagingKey(mailbox.messagingKeyParams.address, mailbox.messagingKeyParams.protocol, mailbox.messagingKeyParams.nonce);
        return this.syncWithMessagingKey(mailbox, messagingKey);
    }
    async syncWithMessagingKey(mailbox, messagingKey) {
        const receiver = this.receiverFactory(this.sdkConfig, messagingKey, this.axiosInstance);
        const messageResults = await receiver.getUndelivered();
        const messages = [];
        for (const messageResult of messageResults) {
            if (messageResult.status !== 'success') {
                console.warn('failed to get undelivered message', messageResult.cause);
                continue;
            }
            const savedMessages = await this.mailboxOperations
                .saveReceivedMessage({ receivedTransportPayload: messageResult.payload, userMailbox: mailbox })
                .catch((e) => {
                console.warn(`Failed saving received message with hash ${messageResult.deliveryRequestHash}`, e);
                return undefined;
            });
            if (savedMessages && savedMessages.length > 0) {
                messages.push(...savedMessages);
                await receiver
                    .confirmDelivery(messageResult.deliveryRequestHash)
                    .then(() => {
                    console.debug(`Successfully confirmed delivery message hash ${encodeHex(messageResult.deliveryRequestHash)}`);
                })
                    .catch((e) => console.warn(`Failed saving received message with hash ${encodeHex(messageResult.deliveryRequestHash)}`, e));
            }
        }
        return { status: 'success', mailbox, messages };
    }
}

export { MessageSync };
