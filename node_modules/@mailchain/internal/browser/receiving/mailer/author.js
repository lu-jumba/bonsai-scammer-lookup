import { parseMimeText } from '../../formatters/parse.js';
import { MailSenderVerifier } from '../../transport/mail/sender.js';
import { parseMailerContentFromJSON } from '../../transport/mailer/content.js';

class MailerAuthorVerifier {
    constructor(mailSenderVerifier) {
        Object.defineProperty(this, "mailSenderVerifier", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: mailSenderVerifier
        });
    }
    static create(configuration) {
        return new MailerAuthorVerifier(MailSenderVerifier.create(configuration));
    }
    /**
     * Checks if the author of the mailer is the same as the from address.
     * @param payload - The mailer payload
     * @returns
     */
    async verifyAuthorOwnsFromAddress(payload, rfcMail) {
        const mailerContent = parseMailerContentFromJSON(payload.Content.toString());
        const parsedContent = await parseMimeText(rfcMail);
        if (mailerContent.authorMailAddress.address !== parsedContent.mailData.from.address) {
            throw new Error('author address does not match from address');
        }
        return await this.mailSenderVerifier.verifySenderOwnsFromAddress(parsedContent.mailData.from, mailerContent.authorMessagingKey);
    }
}

export { MailerAuthorVerifier };
