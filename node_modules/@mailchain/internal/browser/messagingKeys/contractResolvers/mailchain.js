import axios from 'axios';
import { convertPublic } from '@mailchain/api/helpers/apiKeyToCryptoKey';
import { MessagingKeyVerificationError } from '@mailchain/signatures';
import { MessagingKeyVerifier } from '../verify.js';
import { MessagingKeyNotFoundInContractError } from './errors.js';

class MailchainKeyRegContractCallResolver {
    constructor(messagingKeyVerifier, rpcEndpoint, axiosInstance) {
        Object.defineProperty(this, "messagingKeyVerifier", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: messagingKeyVerifier
        });
        Object.defineProperty(this, "rpcEndpoint", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: rpcEndpoint
        });
        Object.defineProperty(this, "axiosInstance", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: axiosInstance
        });
    }
    static create(configuration, axiosInstance = axios.create()) {
        return new this(MessagingKeyVerifier.create(configuration), configuration.apiPath, axiosInstance);
    }
    async resolve(contract) {
        if (contract.path === '/identity-keys/0/messaging-key') {
            return { error: new MessagingKeyNotFoundInContractError() };
        }
        const rpcResponse = await this.callGetMessagingKeyContract(contract);
        const messagingKey = convertPublic(rpcResponse.messagingKey);
        const verified = await this.messagingKeyVerifier.verifyRegisteredKeyProof(rpcResponse.proof, messagingKey);
        if (!verified) {
            return { error: new MessagingKeyVerificationError() };
        }
        return {
            data: {
                messagingKey,
                protocol: contract.protocol,
            },
        };
    }
    async latestNonce(contract) {
        if (contract.path === '/identity-keys/0/nonce') {
            throw new MessagingKeyNotFoundInContractError();
        }
        try {
            const { data } = await this.axiosInstance.request({
                method: contract.method,
                url: this.rpcEndpoint + contract.path,
            });
            const { nonce } = data;
            return nonce;
        }
        catch (error) {
            if (axios.isAxiosError(error) && error.response && error.response.status === 404) {
                throw new MessagingKeyNotFoundInContractError();
            }
            throw error;
        }
    }
    async callGetMessagingKeyContract(contract) {
        const response = await this.axiosInstance.request({
            method: contract.method,
            url: this.rpcEndpoint + contract.path,
        });
        if (response.status !== 200) {
            throw new Error(`Failed to get messaging key from near, status: ${response.status}, response: ${response.data}`);
        }
        return response.data;
    }
}

export { MailchainKeyRegContractCallResolver };
