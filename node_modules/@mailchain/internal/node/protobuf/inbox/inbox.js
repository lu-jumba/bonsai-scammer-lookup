'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var $protobuf = require('protobufjs/minimal');

function _interopNamespaceDefault(e) {
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n.default = e;
    return Object.freeze(n);
}

var $protobuf__namespace = /*#__PURE__*/_interopNamespaceDefault($protobuf);

/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/

// Common aliases
const $Reader = $protobuf__namespace.Reader, $Writer = $protobuf__namespace.Writer, $util = $protobuf__namespace.util;

// Exported root namespace
const $root = $protobuf__namespace.roots["default"] || ($protobuf__namespace.roots["default"] = {});

const preview = $root.preview = (() => {

    /**
     * Namespace preview.
     * @exports preview
     * @namespace
     */
    const preview = {};

    preview.MessagePreview = (function() {

        /**
         * Properties of a MessagePreview.
         * @memberof preview
         * @interface IMessagePreview
         * @property {string|null} [from] MessagePreview from
         * @property {string|null} [subject] MessagePreview subject
         * @property {string|null} [snippet] MessagePreview snippet
         * @property {boolean|null} [hasAttachment] MessagePreview hasAttachment
         * @property {number|null} [timestamp] MessagePreview timestamp
         * @property {Array.<string>|null} [to] MessagePreview to
         * @property {Array.<string>|null} [cc] MessagePreview cc
         * @property {Array.<string>|null} [bcc] MessagePreview bcc
         * @property {string|null} [owner] MessagePreview owner
         * @property {Uint8Array|null} [mailbox] MessagePreview mailbox
         */

        /**
         * Constructs a new MessagePreview.
         * @memberof preview
         * @classdesc Containing the data to show preview of the Inbox Message the user has received/
         * @implements IMessagePreview
         * @constructor
         * @param {preview.IMessagePreview=} [properties] Properties to set
         */
        function MessagePreview(properties) {
            this.to = [];
            this.cc = [];
            this.bcc = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * MessagePreview from.
         * @member {string} from
         * @memberof preview.MessagePreview
         * @instance
         */
        MessagePreview.prototype.from = "";

        /**
         * MessagePreview subject.
         * @member {string} subject
         * @memberof preview.MessagePreview
         * @instance
         */
        MessagePreview.prototype.subject = "";

        /**
         * MessagePreview snippet.
         * @member {string} snippet
         * @memberof preview.MessagePreview
         * @instance
         */
        MessagePreview.prototype.snippet = "";

        /**
         * MessagePreview hasAttachment.
         * @member {boolean} hasAttachment
         * @memberof preview.MessagePreview
         * @instance
         */
        MessagePreview.prototype.hasAttachment = false;

        /**
         * MessagePreview timestamp.
         * @member {number} timestamp
         * @memberof preview.MessagePreview
         * @instance
         */
        MessagePreview.prototype.timestamp = 0;

        /**
         * MessagePreview to.
         * @member {Array.<string>} to
         * @memberof preview.MessagePreview
         * @instance
         */
        MessagePreview.prototype.to = $util.emptyArray;

        /**
         * MessagePreview cc.
         * @member {Array.<string>} cc
         * @memberof preview.MessagePreview
         * @instance
         */
        MessagePreview.prototype.cc = $util.emptyArray;

        /**
         * MessagePreview bcc.
         * @member {Array.<string>} bcc
         * @memberof preview.MessagePreview
         * @instance
         */
        MessagePreview.prototype.bcc = $util.emptyArray;

        /**
         * MessagePreview owner.
         * @member {string} owner
         * @memberof preview.MessagePreview
         * @instance
         */
        MessagePreview.prototype.owner = "";

        /**
         * MessagePreview mailbox.
         * @member {Uint8Array} mailbox
         * @memberof preview.MessagePreview
         * @instance
         */
        MessagePreview.prototype.mailbox = $util.newBuffer([]);

        /**
         * Creates a new MessagePreview instance using the specified properties.
         * @function create
         * @memberof preview.MessagePreview
         * @static
         * @param {preview.IMessagePreview=} [properties] Properties to set
         * @returns {preview.MessagePreview} MessagePreview instance
         */
        MessagePreview.create = function create(properties) {
            return new MessagePreview(properties);
        };

        /**
         * Encodes the specified MessagePreview message. Does not implicitly {@link preview.MessagePreview.verify|verify} messages.
         * @function encode
         * @memberof preview.MessagePreview
         * @static
         * @param {preview.IMessagePreview} message MessagePreview message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MessagePreview.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.from != null && Object.hasOwnProperty.call(message, "from"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.from);
            if (message.subject != null && Object.hasOwnProperty.call(message, "subject"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.subject);
            if (message.snippet != null && Object.hasOwnProperty.call(message, "snippet"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.snippet);
            if (message.hasAttachment != null && Object.hasOwnProperty.call(message, "hasAttachment"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.hasAttachment);
            if (message.timestamp != null && Object.hasOwnProperty.call(message, "timestamp"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.timestamp);
            if (message.to != null && message.to.length)
                for (let i = 0; i < message.to.length; ++i)
                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.to[i]);
            if (message.cc != null && message.cc.length)
                for (let i = 0; i < message.cc.length; ++i)
                    writer.uint32(/* id 7, wireType 2 =*/58).string(message.cc[i]);
            if (message.bcc != null && message.bcc.length)
                for (let i = 0; i < message.bcc.length; ++i)
                    writer.uint32(/* id 8, wireType 2 =*/66).string(message.bcc[i]);
            if (message.owner != null && Object.hasOwnProperty.call(message, "owner"))
                writer.uint32(/* id 9, wireType 2 =*/74).string(message.owner);
            if (message.mailbox != null && Object.hasOwnProperty.call(message, "mailbox"))
                writer.uint32(/* id 10, wireType 2 =*/82).bytes(message.mailbox);
            return writer;
        };

        /**
         * Encodes the specified MessagePreview message, length delimited. Does not implicitly {@link preview.MessagePreview.verify|verify} messages.
         * @function encodeDelimited
         * @memberof preview.MessagePreview
         * @static
         * @param {preview.IMessagePreview} message MessagePreview message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MessagePreview.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a MessagePreview message from the specified reader or buffer.
         * @function decode
         * @memberof preview.MessagePreview
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {preview.MessagePreview} MessagePreview
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MessagePreview.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.preview.MessagePreview();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.from = reader.string();
                        break;
                    }
                case 2: {
                        message.subject = reader.string();
                        break;
                    }
                case 3: {
                        message.snippet = reader.string();
                        break;
                    }
                case 4: {
                        message.hasAttachment = reader.bool();
                        break;
                    }
                case 5: {
                        message.timestamp = reader.int32();
                        break;
                    }
                case 6: {
                        if (!(message.to && message.to.length))
                            message.to = [];
                        message.to.push(reader.string());
                        break;
                    }
                case 7: {
                        if (!(message.cc && message.cc.length))
                            message.cc = [];
                        message.cc.push(reader.string());
                        break;
                    }
                case 8: {
                        if (!(message.bcc && message.bcc.length))
                            message.bcc = [];
                        message.bcc.push(reader.string());
                        break;
                    }
                case 9: {
                        message.owner = reader.string();
                        break;
                    }
                case 10: {
                        message.mailbox = reader.bytes();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a MessagePreview message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof preview.MessagePreview
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {preview.MessagePreview} MessagePreview
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MessagePreview.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a MessagePreview message.
         * @function verify
         * @memberof preview.MessagePreview
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MessagePreview.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.from != null && message.hasOwnProperty("from"))
                if (!$util.isString(message.from))
                    return "from: string expected";
            if (message.subject != null && message.hasOwnProperty("subject"))
                if (!$util.isString(message.subject))
                    return "subject: string expected";
            if (message.snippet != null && message.hasOwnProperty("snippet"))
                if (!$util.isString(message.snippet))
                    return "snippet: string expected";
            if (message.hasAttachment != null && message.hasOwnProperty("hasAttachment"))
                if (typeof message.hasAttachment !== "boolean")
                    return "hasAttachment: boolean expected";
            if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                if (!$util.isInteger(message.timestamp))
                    return "timestamp: integer expected";
            if (message.to != null && message.hasOwnProperty("to")) {
                if (!Array.isArray(message.to))
                    return "to: array expected";
                for (let i = 0; i < message.to.length; ++i)
                    if (!$util.isString(message.to[i]))
                        return "to: string[] expected";
            }
            if (message.cc != null && message.hasOwnProperty("cc")) {
                if (!Array.isArray(message.cc))
                    return "cc: array expected";
                for (let i = 0; i < message.cc.length; ++i)
                    if (!$util.isString(message.cc[i]))
                        return "cc: string[] expected";
            }
            if (message.bcc != null && message.hasOwnProperty("bcc")) {
                if (!Array.isArray(message.bcc))
                    return "bcc: array expected";
                for (let i = 0; i < message.bcc.length; ++i)
                    if (!$util.isString(message.bcc[i]))
                        return "bcc: string[] expected";
            }
            if (message.owner != null && message.hasOwnProperty("owner"))
                if (!$util.isString(message.owner))
                    return "owner: string expected";
            if (message.mailbox != null && message.hasOwnProperty("mailbox"))
                if (!(message.mailbox && typeof message.mailbox.length === "number" || $util.isString(message.mailbox)))
                    return "mailbox: buffer expected";
            return null;
        };

        /**
         * Creates a MessagePreview message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof preview.MessagePreview
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {preview.MessagePreview} MessagePreview
         */
        MessagePreview.fromObject = function fromObject(object) {
            if (object instanceof $root.preview.MessagePreview)
                return object;
            let message = new $root.preview.MessagePreview();
            if (object.from != null)
                message.from = String(object.from);
            if (object.subject != null)
                message.subject = String(object.subject);
            if (object.snippet != null)
                message.snippet = String(object.snippet);
            if (object.hasAttachment != null)
                message.hasAttachment = Boolean(object.hasAttachment);
            if (object.timestamp != null)
                message.timestamp = object.timestamp | 0;
            if (object.to) {
                if (!Array.isArray(object.to))
                    throw TypeError(".preview.MessagePreview.to: array expected");
                message.to = [];
                for (let i = 0; i < object.to.length; ++i)
                    message.to[i] = String(object.to[i]);
            }
            if (object.cc) {
                if (!Array.isArray(object.cc))
                    throw TypeError(".preview.MessagePreview.cc: array expected");
                message.cc = [];
                for (let i = 0; i < object.cc.length; ++i)
                    message.cc[i] = String(object.cc[i]);
            }
            if (object.bcc) {
                if (!Array.isArray(object.bcc))
                    throw TypeError(".preview.MessagePreview.bcc: array expected");
                message.bcc = [];
                for (let i = 0; i < object.bcc.length; ++i)
                    message.bcc[i] = String(object.bcc[i]);
            }
            if (object.owner != null)
                message.owner = String(object.owner);
            if (object.mailbox != null)
                if (typeof object.mailbox === "string")
                    $util.base64.decode(object.mailbox, message.mailbox = $util.newBuffer($util.base64.length(object.mailbox)), 0);
                else if (object.mailbox.length >= 0)
                    message.mailbox = object.mailbox;
            return message;
        };

        /**
         * Creates a plain object from a MessagePreview message. Also converts values to other types if specified.
         * @function toObject
         * @memberof preview.MessagePreview
         * @static
         * @param {preview.MessagePreview} message MessagePreview
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MessagePreview.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.arrays || options.defaults) {
                object.to = [];
                object.cc = [];
                object.bcc = [];
            }
            if (options.defaults) {
                object.from = "";
                object.subject = "";
                object.snippet = "";
                object.hasAttachment = false;
                object.timestamp = 0;
                object.owner = "";
                if (options.bytes === String)
                    object.mailbox = "";
                else {
                    object.mailbox = [];
                    if (options.bytes !== Array)
                        object.mailbox = $util.newBuffer(object.mailbox);
                }
            }
            if (message.from != null && message.hasOwnProperty("from"))
                object.from = message.from;
            if (message.subject != null && message.hasOwnProperty("subject"))
                object.subject = message.subject;
            if (message.snippet != null && message.hasOwnProperty("snippet"))
                object.snippet = message.snippet;
            if (message.hasAttachment != null && message.hasOwnProperty("hasAttachment"))
                object.hasAttachment = message.hasAttachment;
            if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                object.timestamp = message.timestamp;
            if (message.to && message.to.length) {
                object.to = [];
                for (let j = 0; j < message.to.length; ++j)
                    object.to[j] = message.to[j];
            }
            if (message.cc && message.cc.length) {
                object.cc = [];
                for (let j = 0; j < message.cc.length; ++j)
                    object.cc[j] = message.cc[j];
            }
            if (message.bcc && message.bcc.length) {
                object.bcc = [];
                for (let j = 0; j < message.bcc.length; ++j)
                    object.bcc[j] = message.bcc[j];
            }
            if (message.owner != null && message.hasOwnProperty("owner"))
                object.owner = message.owner;
            if (message.mailbox != null && message.hasOwnProperty("mailbox"))
                object.mailbox = options.bytes === String ? $util.base64.encode(message.mailbox, 0, message.mailbox.length) : options.bytes === Array ? Array.prototype.slice.call(message.mailbox) : message.mailbox;
            return object;
        };

        /**
         * Converts this MessagePreview to JSON.
         * @function toJSON
         * @memberof preview.MessagePreview
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MessagePreview.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf__namespace.util.toJSONOptions);
        };

        /**
         * Gets the default type url for MessagePreview
         * @function getTypeUrl
         * @memberof preview.MessagePreview
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        MessagePreview.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/preview.MessagePreview";
        };

        return MessagePreview;
    })();

    return preview;
})();

exports.default = $root;
exports.preview = preview;
