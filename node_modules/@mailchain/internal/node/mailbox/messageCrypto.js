'use strict';

var crypto = require('@mailchain/crypto');
var headers = require('./payload/headers.js');
var encrypt = require('../transport/serialization/encrypt.js');
var chunk = require('../transport/serialization/chunk.js');
var serialization = require('../transport/serialization/serialization.js');
var decrypt = require('../transport/serialization/decrypt.js');

function createMailchainMessageCrypto(keyRing) {
    const inboxKey = crypto.ED25519ExtendedPrivateKey.fromPrivateKey(keyRing.rootInboxKey());
    const encrypt$1 = async (payload) => {
        const headers$1 = headers.SerializableMailPayloadHeaders.FromEncryptedMailPayloadHeaders(payload.Headers).ToBuffer();
        const encryptedPayload = await encrypt.encryptPayload(headers$1, payload.Content, inboxKey, chunk.CHUNK_LENGTH_1MB);
        const serializedContent = serialization.serialize(encryptedPayload);
        return new Uint8Array(serializedContent);
    };
    const decrypt$1 = async (serializedContent) => {
        const encryptedPayload = serialization.deserialize(Buffer.from(serializedContent));
        const { headers: headers$1, content } = await decrypt.decryptPayload(encryptedPayload, inboxKey);
        return {
            Content: content,
            Headers: headers.SerializableMailPayloadHeaders.FromBuffer(headers$1).headers,
        };
    };
    return { encrypt: encrypt$1, decrypt: decrypt$1 };
}

exports.createMailchainMessageCrypto = createMailchainMessageCrypto;
