'use strict';

var crypto = require('@mailchain/crypto');
var protocol = require('../../protobuf/protocol/protocol.js');
var keybundle = require('./keybundle.js');

/* eslint-disable @typescript-eslint/naming-convention */
/**
 *
 * @param recipientIdentityKey this is a Mailchain identity key.
 * @param messageKey root key used to encrypt message and payload
 */
async function createEnvelope(recipientMessagingKey, messageRootEncryptionKey, messageURI, rand = crypto.secureRandom) {
    const keyBundle = await keybundle.createECDHKeyBundle(recipientMessagingKey, rand);
    const encrypter = crypto.PrivateKeyEncrypter.fromPrivateKey(crypto.ED25519PrivateKey.fromSeed(keyBundle.secret), rand);
    const encryptedMessageKey = await encrypter.encrypt(crypto.privateKeyToBytes(messageRootEncryptionKey.privateKey)); //TODO: look into encoding extended keys
    const encryptedMessageURI = await encrypter.encrypt(Buffer.from(messageURI, 'utf8'));
    const payload = {
        encryptedMessageKey,
        encryptedMessageUri: encryptedMessageURI,
        ecdhKeyBundle: keyBundle.keyBundle,
    };
    const errMsg = protocol.protocol.Envelope.verify(payload);
    if (errMsg)
        throw Error(errMsg);
    return protocol.protocol.Envelope.create(payload);
}

exports.createEnvelope = createEnvelope;
