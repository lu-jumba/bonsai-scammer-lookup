'use strict';

var crypto = require('@mailchain/crypto');
var protocol = require('../../protobuf/protocol/protocol.js');

/* eslint-disable @typescript-eslint/naming-convention */
async function createECDHKeyBundle(recipientMessagingKey, rand = crypto.secureRandom) {
    const keyEx = new crypto.ED25519KeyExchange(rand);
    const ephemeralKey = await keyEx.EphemeralKey();
    const sharedSecret = await keyEx.SharedSecret(ephemeralKey, recipientMessagingKey);
    const payload = {
        publicMessagingKey: crypto.publicKeyToBytes(recipientMessagingKey),
        publicEphemeralKey: crypto.publicKeyToBytes(ephemeralKey.publicKey),
    };
    const errMsg = protocol.protocol.ECDHKeyBundle.verify(payload);
    if (errMsg) {
        throw Error(errMsg);
    }
    return {
        secret: sharedSecret,
        keyBundle: protocol.protocol.ECDHKeyBundle.create(payload),
    };
}

exports.createECDHKeyBundle = createECDHKeyBundle;
