'use strict';

var crypto = require('@mailchain/crypto');
var signatures = require('@mailchain/signatures');
var addressNonce = require('./addressNonce.js');
var messagingKeys = require('./messagingKeys.js');
var errors = require('./errors.js');

class PrivateMessagingKeys {
    constructor(messagingKeys, addressNonce) {
        Object.defineProperty(this, "messagingKeys", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: messagingKeys
        });
        Object.defineProperty(this, "addressNonce", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: addressNonce
        });
    }
    static create(config) {
        return new PrivateMessagingKeys(messagingKeys.MessagingKeys.create(config), addressNonce.AddressNonce.create(config));
    }
    async getExportablePrivateMessagingKey(address, keyRing) {
        const { data: resolvedAddress, error: resolveAddressError } = await this.messagingKeys.resolve(address);
        if (resolveAddressError != null) {
            return { error: resolveAddressError };
        }
        const { data: getMessagingKeyLatestNonce, error: getMessagingKeyLatestNonceError } = await this.addressNonce.getMessagingKeyLatestNonce(resolvedAddress.protocolAddress, resolvedAddress.protocol);
        if (getMessagingKeyLatestNonceError != null) {
            return { error: getMessagingKeyLatestNonceError };
        }
        if (resolvedAddress.type === 'vended') {
            return { error: new errors.MessagingKeyNotRegisteredError() };
        }
        const privateMessagingKey = keyRing.addressExportableMessagingKey(resolvedAddress.protocolAddress, resolvedAddress.protocol, getMessagingKeyLatestNonce);
        if (!crypto.isPublicKeyEqual(privateMessagingKey.publicKey, resolvedAddress.messagingKey)) {
            return { error: new signatures.SenderMessagingKeyIncorrect() };
        }
        return { data: privateMessagingKey };
    }
}

exports.PrivateMessagingKeys = PrivateMessagingKeys;
