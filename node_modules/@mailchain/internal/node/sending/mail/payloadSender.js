'use strict';

var api = require('@mailchain/api');
var send = require('../payload/send.js');
var mailchainResult = require('../../mailchainResult.js');

class PrepareDistributionsFailuresError extends Error {
    constructor(successes, failures) {
        super(`Not all distributions prepared correctly. Check the failed distributions to retry failed requests.`);
        Object.defineProperty(this, "successes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: successes
        });
        Object.defineProperty(this, "failures", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: failures
        });
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 'prepare_distributions_failures'
        });
        Object.defineProperty(this, "docs", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 'https://docs.mailchain.com/developer/errors/codes#prepare_distributions_failures'
        });
    }
}
class PayloadSendingError extends Error {
    constructor(distribution, cause) {
        super('Payload could not be sent.', { cause });
        Object.defineProperty(this, "distribution", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: distribution
        });
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 'payload_sending_error'
        });
    }
}
class MailPayloadSender {
    constructor(payloadSender) {
        Object.defineProperty(this, "payloadSender", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: payloadSender
        });
    }
    static create(configuration, signer) {
        return new MailPayloadSender(send.PayloadSender.create(api.createAxiosConfiguration(configuration.apiPath), signer));
    }
    /**
     * Prepare payloads, update each distribution to the storage layer
     * @param distributions payloads for each recipient
     * @returns
     */
    async prepareDistributions(distributions) {
        const preparedDistributions = await Promise.all(distributions.map(async (distribution) => {
            const result = await this.prepareDistribution(distribution);
            return { result, params: distribution };
        }));
        const { successes, failures } = mailchainResult.partitionMailchainResults(preparedDistributions);
        if (failures.length > 0) {
            return {
                error: new PrepareDistributionsFailuresError(successes, failures),
            };
        }
        return {
            data: successes.map(({ data }) => data),
        };
    }
    async prepareDistribution(distribution) {
        const { data, error } = await this.payloadSender.sendPayload(distribution.payload);
        if (error) {
            return {
                error: new PayloadSendingError(distribution, error),
            };
        }
        return {
            data: {
                distribution,
                preparedPayload: data,
            },
        };
    }
}

exports.MailPayloadSender = MailPayloadSender;
exports.PayloadSendingError = PayloadSendingError;
exports.PrepareDistributionsFailuresError = PrepareDistributionsFailuresError;
