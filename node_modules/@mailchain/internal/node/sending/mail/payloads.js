'use strict';

var crypto = require('@mailchain/crypto');
var encoding = require('@mailchain/encoding');
var generate = require('../../formatters/generate.js');

async function createMailPayloads(senderMessagingKey, resolvedAddresses, mailData) {
    const message = await generate.createMimeMessage(mailData, resolvedAddresses);
    const original = await createMailPayload(senderMessagingKey, message.original);
    const visibleRecipientsPayload = await createMailPayload(senderMessagingKey, message.visibleRecipients);
    const blindRecipients = await Promise.all(message.blindRecipients.map(async ({ recipient, content }) => ({
        recipients: [recipient],
        payload: await createMailPayload(senderMessagingKey, content),
    })));
    return {
        original,
        distributions: [
            {
                recipients: [...mailData.recipients, ...mailData.carbonCopyRecipients],
                payload: visibleRecipientsPayload,
            },
            ...blindRecipients,
        ],
    };
}
async function createMailPayload(senderMessagingKey, contentPayload) {
    const contentBuffer = Buffer.from(contentPayload);
    return {
        Headers: {
            Origin: senderMessagingKey.publicKey,
            ContentSignature: await senderMessagingKey.sign(contentBuffer),
            Created: new Date(),
            ContentLength: contentBuffer.length,
            ContentType: 'message/x.mailchain',
            ContentEncoding: encoding.EncodingTypes.Base64,
            ContentEncryption: crypto.KindNaClSecretKey,
        },
        Content: contentBuffer,
    };
}

exports.createMailPayload = createMailPayload;
exports.createMailPayloads = createMailPayloads;
