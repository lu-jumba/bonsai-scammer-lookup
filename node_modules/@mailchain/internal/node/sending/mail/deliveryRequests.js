'use strict';

var flatten = require('lodash/flatten');
var deliveryRequests = require('../deliveryRequests/deliveryRequests.js');
var mailchainResult = require('../../mailchainResult.js');

class SendMailDeliveryRequestsFailuresError extends Error {
    constructor(successes, failures) {
        super(`Not all mail delivery requests were successfully sent. Check the failed delivery requests to retry failed requests.`);
        Object.defineProperty(this, "successes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: successes
        });
        Object.defineProperty(this, "failures", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: failures
        });
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 'send_mail_delivery_request_failures'
        });
        Object.defineProperty(this, "docs", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 'https://docs.mailchain.com/developer/errors/codes#send_mail_delivery_request_failures'
        });
    }
}
class MailDeliveryRequests {
    constructor(deliveryRequests) {
        Object.defineProperty(this, "deliveryRequests", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: deliveryRequests
        });
    }
    static create(configuration, sender) {
        return new MailDeliveryRequests(deliveryRequests.DeliveryRequests.create(configuration, sender));
    }
    /**
     * Send the prepared payloads to each recipient.
     * A single payload maybe be sent to multiple recipients in the case of multiple recipients.
     * Separate payloads are sent to each recipient in the case of bcc recipients.
     */
    async sendMailDeliveryRequests(params) {
        const { distributions, resolvedAddresses } = params;
        // for each distribution, send the payload to the recipients
        const sendResults = await Promise.all(distributions.map(async (preparedDistribution) => {
            const recipients = preparedDistribution.distribution.recipients.map(({ address }) => resolvedAddresses.get(address).messagingKey);
            const sendManyDeliveryRequestsParams = {
                recipients,
                ...preparedDistribution.preparedPayload,
            };
            const result = await this.deliveryRequests.sendManyDeliveryRequests(sendManyDeliveryRequestsParams);
            return {
                result,
                params: sendManyDeliveryRequestsParams,
            };
        }));
        const { successes: successfulDeliveries, failures: failed } = mailchainResult.partitionMailchainResults(sendResults);
        if (failed.length > 0) {
            return { error: new SendMailDeliveryRequestsFailuresError(successfulDeliveries, failed) };
        }
        return {
            data: flatten(successfulDeliveries.map(({ data }) => data)),
        };
    }
}

exports.MailDeliveryRequests = MailDeliveryRequests;
exports.SendMailDeliveryRequestsFailuresError = SendMailDeliveryRequestsFailuresError;
