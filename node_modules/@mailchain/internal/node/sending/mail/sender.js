'use strict';

var configuration = require('../../configuration.js');
var convertSendMailParams = require('./convertSendMailParams.js');
var prepare = require('./prepare.js');
var distributor = require('./distributor.js');

class MailSender {
    constructor(senderMessagingKey, mailPreparer, mailDistributor) {
        Object.defineProperty(this, "senderMessagingKey", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: senderMessagingKey
        });
        Object.defineProperty(this, "mailPreparer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: mailPreparer
        });
        Object.defineProperty(this, "mailDistributor", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: mailDistributor
        });
    }
    static fromSenderMessagingKey(senderMessagingKey, configuration$1 = configuration.defaultConfiguration) {
        return new MailSender(senderMessagingKey, prepare.MailPreparer.create(configuration$1), distributor.MailDistributor.create(configuration$1, senderMessagingKey));
    }
    /**
     * Send a mail to any blockchain or Mailchain address using the address Messaging Key.
     *
     * @param params {@link SendMailParams} - The parameters for sending a mail.
     * @returns
     */
    async sendMail(params) {
        const { data: preparedMail, error: prepareMailError } = await this.mailPreparer.prepareMail({
            message: convertSendMailParams.toMailData(params),
            senderMessagingKey: this.senderMessagingKey,
        });
        if (prepareMailError) {
            return { error: prepareMailError };
        }
        const { data: distributedMail, error: distributedMailError } = await this.mailDistributor.distributeMail({
            distributions: preparedMail.distributions,
            resolvedAddresses: preparedMail.resolvedAddresses,
        });
        if (distributedMailError) {
            return { error: distributedMailError };
        }
        return {
            data: {
                sentMailDeliveryRequests: distributedMail,
            },
        };
    }
}

exports.MailSender = MailSender;
