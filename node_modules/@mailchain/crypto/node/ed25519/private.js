'use strict';

var nacl = require('tweetnacl');
var keys = require('../keys.js');
var mnemonic = require('../mnemonic/mnemonic.js');
var rand = require('../rand.js');
var _public = require('./public.js');

const ED25519PrivateKeyLength = 64;
const ED25519SeedLength = 32;
class ED25519PrivateKey {
    constructor(keyPair) {
        Object.defineProperty(this, "bytes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "publicKey", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "curve", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: keys.KindED25519
        });
        Object.defineProperty(this, "keyPair", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.keyPair = keyPair;
        this.bytes = this.keyPair.secretKey;
        this.publicKey = new _public.ED25519PublicKey(this.keyPair.publicKey);
    }
    static fromSeed(seed) {
        if (seed.length !== ED25519SeedLength) {
            throw Error('seed must be 32 bytes');
        }
        return new this(nacl.sign.keyPair.fromSeed(seed));
    }
    static fromSecretKey(secretKey) {
        if (secretKey.length !== ED25519PrivateKeyLength) {
            throw Error('secret key must be 64 bytes');
        }
        return new this(nacl.sign.keyPair.fromSecretKey(secretKey));
    }
    static fromMnemonicPhrase(mnemonic$1, password = '') {
        return this.fromSeed(mnemonic.toSeed(mnemonic$1, password, ED25519SeedLength));
    }
    static generate(rand$1 = rand.secureRandom) {
        return this.fromSeed(rand$1(ED25519SeedLength));
    }
    async sign(message) {
        return nacl.sign.detached(message, this.keyPair.secretKey);
    }
}
function asED25519PrivateKey(key) {
    if (key.constructor !== ED25519PrivateKey) {
        throw new Error('key must be ed25519');
    }
    return key;
}

exports.ED25519PrivateKey = ED25519PrivateKey;
exports.ED25519PrivateKeyLength = ED25519PrivateKeyLength;
exports.ED25519SeedLength = ED25519SeedLength;
exports.asED25519PrivateKey = asED25519PrivateKey;
