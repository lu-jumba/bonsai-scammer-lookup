'use strict';

var rand = require('../../rand.js');
var ecdh = require('../ecdh/ecdh.js');
var secretbox = require('./secretbox.js');
var serialization = require('./serialization.js');

class PublicKeyEncrypter {
    constructor(keyEx, pubKey, rand$1 = rand.secureRandom) {
        Object.defineProperty(this, "_keyEx", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_pubKey", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_rand", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._rand = rand$1;
        this._keyEx = keyEx;
        this._pubKey = pubKey;
    }
    static FromPublicKey(key) {
        return new this(ecdh.fromPublicKey(key), key);
    }
    async encrypt(input) {
        const ephemeralPrvKey = await this._keyEx.EphemeralKey();
        const sharedSecret = await this._keyEx.SharedSecret(ephemeralPrvKey, this._pubKey);
        const sealedBox = secretbox.easySeal(input, sharedSecret, this._rand);
        return serialization.serializePublicKeyEncryptedContent(sealedBox, ephemeralPrvKey.publicKey);
    }
}

exports.PublicKeyEncrypter = PublicKeyEncrypter;
