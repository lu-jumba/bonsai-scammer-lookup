'use strict';

var keys = require('../keys.js');
var _private$1 = require('../secp256k1/private.js');
var _public$1 = require('../secp256k1/public.js');
var _private$2 = require('../ed25519/private.js');
var _public$2 = require('../ed25519/public.js');
var _public = require('../secp256r1/public.js');
var _private = require('../secp256r1/private.js');

function idFromPublicKey(key) {
    switch (key.constructor) {
        case _public$2.ED25519PublicKey:
            return keys.IdED25519;
        case _public$1.SECP256K1PublicKey:
            return keys.IdSECP256K1;
        case _public.SECP256R1PublicKey:
            return keys.IdSECP256R1;
        default:
            throw RangeError('unknown public key type');
    }
}
function idFromPrivateKey(key) {
    switch (key.constructor) {
        case _private$2.ED25519PrivateKey:
            return keys.IdED25519;
        case _private$1.SECP256K1PrivateKey:
            return keys.IdSECP256K1;
        case _private.SECP256R1PrivateKey:
            return keys.IdSECP256R1;
        default:
            throw RangeError('unknown private key type');
    }
}
function publicKeyFromId(id, data) {
    switch (id) {
        case keys.IdSECP256K1:
            return new _public$1.SECP256K1PublicKey(data);
        case keys.IdED25519:
            return new _public$2.ED25519PublicKey(data);
        case keys.IdSECP256R1:
            return new _public.SECP256R1PublicKey(data);
        default:
            throw RangeError('unknown public key id');
    }
}
function privateKeyFromId(id, data) {
    switch (id) {
        case keys.IdSECP256K1:
            return new _private$1.SECP256K1PrivateKey(data);
        case keys.IdED25519:
            return _private$2.ED25519PrivateKey.fromSecretKey(data);
        case keys.IdSECP256R1:
            return new _private.SECP256R1PrivateKey(data);
        default:
            throw RangeError('unknown private key id');
    }
}

exports.idFromPrivateKey = idFromPrivateKey;
exports.idFromPublicKey = idFromPublicKey;
exports.privateKeyFromId = privateKeyFromId;
exports.publicKeyFromId = publicKeyFromId;
