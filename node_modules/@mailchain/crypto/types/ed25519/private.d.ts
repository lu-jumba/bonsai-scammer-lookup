import { PrivateKey } from '../private';
import { PublicKey } from '../public';
import { RandomFunction } from '../rand';
export declare const ED25519PrivateKeyLength = 64;
export declare const ED25519SeedLength = 32;
type KeyPair = {
    publicKey: Uint8Array;
    secretKey: Uint8Array;
};
export declare class ED25519PrivateKey implements PrivateKey {
    readonly bytes: Uint8Array;
    readonly publicKey: PublicKey;
    readonly curve: string;
    readonly keyPair: KeyPair;
    constructor(keyPair: KeyPair);
    static fromSeed(seed: Uint8Array): ED25519PrivateKey;
    static fromSecretKey(secretKey: Uint8Array): ED25519PrivateKey;
    static fromMnemonicPhrase(mnemonic: string, password?: string): ED25519PrivateKey;
    static generate(rand?: RandomFunction): ED25519PrivateKey;
    sign(message: Uint8Array): Promise<Uint8Array>;
}
export declare function asED25519PrivateKey(key: PrivateKey): ED25519PrivateKey;
export {};
