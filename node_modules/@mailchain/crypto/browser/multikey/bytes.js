import { idFromPublicKey, publicKeyFromId, idFromPrivateKey, privateKeyFromId } from './ids.js';

function publicKeyToBytes(key) {
    const out = new Uint8Array(key.bytes.length + 1);
    out[0] = idFromPublicKey(key);
    out.set(key.bytes, 1);
    return out;
}
function publicKeyFromBytes(bytes) {
    if (bytes.length < 32 + 1) {
        throw Error('public key is too short to contain ID byte');
    }
    return publicKeyFromId(bytes[0], bytes.slice(1));
}
function privateKeyToBytes(key) {
    const out = new Uint8Array(key.bytes.length + 1);
    out[0] = idFromPrivateKey(key);
    out.set(key.bytes, 1);
    return out;
}
function privateKeyFromBytes(bytes) {
    if (bytes.length < 32 + 1) {
        throw Error('private key is too short to contain ID byte');
    }
    return privateKeyFromId(bytes[0], bytes.slice(1));
}

export { privateKeyFromBytes, privateKeyToBytes, publicKeyFromBytes, publicKeyToBytes };
