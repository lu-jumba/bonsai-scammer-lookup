import { IdSECP256R1, IdSECP256K1, IdED25519 } from '../keys.js';
import { SECP256K1PrivateKey } from '../secp256k1/private.js';
import { SECP256K1PublicKey } from '../secp256k1/public.js';
import { ED25519PrivateKey } from '../ed25519/private.js';
import { ED25519PublicKey } from '../ed25519/public.js';
import { SECP256R1PublicKey } from '../secp256r1/public.js';
import { SECP256R1PrivateKey } from '../secp256r1/private.js';

function idFromPublicKey(key) {
    switch (key.constructor) {
        case ED25519PublicKey:
            return IdED25519;
        case SECP256K1PublicKey:
            return IdSECP256K1;
        case SECP256R1PublicKey:
            return IdSECP256R1;
        default:
            throw RangeError('unknown public key type');
    }
}
function idFromPrivateKey(key) {
    switch (key.constructor) {
        case ED25519PrivateKey:
            return IdED25519;
        case SECP256K1PrivateKey:
            return IdSECP256K1;
        case SECP256R1PrivateKey:
            return IdSECP256R1;
        default:
            throw RangeError('unknown private key type');
    }
}
function publicKeyFromId(id, data) {
    switch (id) {
        case IdSECP256K1:
            return new SECP256K1PublicKey(data);
        case IdED25519:
            return new ED25519PublicKey(data);
        case IdSECP256R1:
            return new SECP256R1PublicKey(data);
        default:
            throw RangeError('unknown public key id');
    }
}
function privateKeyFromId(id, data) {
    switch (id) {
        case IdSECP256K1:
            return new SECP256K1PrivateKey(data);
        case IdED25519:
            return ED25519PrivateKey.fromSecretKey(data);
        case IdSECP256R1:
            return new SECP256R1PrivateKey(data);
        default:
            throw RangeError('unknown private key id');
    }
}

export { idFromPrivateKey, idFromPublicKey, privateKeyFromId, publicKeyFromId };
