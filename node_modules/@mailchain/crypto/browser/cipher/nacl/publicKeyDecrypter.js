import { fromPrivateKey } from '../ecdh/ecdh.js';
import { easyOpen } from './secretbox.js';
import { deserializePublicKeyEncryptedContent } from './serialization.js';

class PublicKeyDecrypter {
    constructor(keyEx, prvKey) {
        Object.defineProperty(this, "_keyEx", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_prvKey", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._keyEx = keyEx;
        this._prvKey = prvKey;
    }
    static FromPrivateKey(key) {
        return new this(fromPrivateKey(key), key);
    }
    async decrypt(input) {
        const secretData = deserializePublicKeyEncryptedContent(input);
        const sharedSecret = await this._keyEx.SharedSecret(this._prvKey, secretData.pubKey);
        return easyOpen(secretData.encryptedContent, sharedSecret);
    }
}

export { PublicKeyDecrypter };
