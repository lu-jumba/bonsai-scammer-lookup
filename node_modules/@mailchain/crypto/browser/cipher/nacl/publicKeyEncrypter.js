import { secureRandom } from '../../rand.js';
import { fromPublicKey } from '../ecdh/ecdh.js';
import { easySeal } from './secretbox.js';
import { serializePublicKeyEncryptedContent } from './serialization.js';

class PublicKeyEncrypter {
    constructor(keyEx, pubKey, rand = secureRandom) {
        Object.defineProperty(this, "_keyEx", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_pubKey", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_rand", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._rand = rand;
        this._keyEx = keyEx;
        this._pubKey = pubKey;
    }
    static FromPublicKey(key) {
        return new this(fromPublicKey(key), key);
    }
    async encrypt(input) {
        const ephemeralPrvKey = await this._keyEx.EphemeralKey();
        const sharedSecret = await this._keyEx.SharedSecret(ephemeralPrvKey, this._pubKey);
        const sealedBox = easySeal(input, sharedSecret, this._rand);
        return serializePublicKeyEncryptedContent(sealedBox, ephemeralPrvKey.publicKey);
    }
}

export { PublicKeyEncrypter };
