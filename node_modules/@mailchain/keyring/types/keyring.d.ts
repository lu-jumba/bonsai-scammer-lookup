import { PublicKey, PrivateKey, Encrypter, Decrypter, SignerWithPublicKey, ED25519PrivateKey } from '@mailchain/crypto';
import { ProtocolType } from '@mailchain/addressing';
import { InboxKey, KeyRingDecrypter } from './functions';
export type PrivateMessagingKey = KeyRingDecrypter;
export declare class KeyRing {
    private readonly _accountIdentityKey;
    private readonly _rootEncryptionKey;
    private readonly _userProfileEncryptionKey;
    private readonly _rootInboxKey;
    private readonly _protocolAddressRootMessagingKey;
    private readonly _accountMessagingKey;
    /**
     *
     * @param accountKey This key is never stored in the key chain only used to derive other keys.
     */
    constructor(accountKey: ED25519PrivateKey);
    /**
     * Use your Secret Recovery Phrase to authenticate your keyring.
     * @param secretRecoveryPhrase a 24 word [BIP 39](https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki) compatible mnemonic phrase.
     */
    static fromSecretRecoveryPhrase(secretRecoveryPhrase: string, password?: string): KeyRing;
    static fromPrivateKey(key: ED25519PrivateKey): KeyRing;
    rootEncryptionPublicKey(): PublicKey;
    rootInboxKey(): PrivateKey;
    inboxMessageDateOffset(): number;
    inboxKey(): InboxKey;
    userProfileCrypto(): Encrypter & Decrypter;
    /**
     * Gets messaging key that can be used for signing and decrypting for a specific protocol address.
     * @param address protocol address e.g. 0x1234.... for ethereum.
     * @param protocol a {@link ProtocolType}
     * @param nonce in most cases you will want to use the latest nonce.
     * @returns
     */
    addressMessagingKey(address: string, protocol: ProtocolType, nonce: number): PrivateMessagingKey;
    /**
     * Gets messaging key that can be exported for a specific protocol address.
     * @param address protocol address e.g. 0x1234.... for ethereum
     * @param protocol a {@link ProtocolType}
     * @param nonce in most cases you will want to use the latest nonce.
     * @returns
     */
    addressExportableMessagingKey(address: string, protocol: ProtocolType, nonce: number): PrivateKey;
    addressBytesMessagingKey(address: Uint8Array, protocol: ProtocolType, nonce: number): PrivateMessagingKey;
    addressBytesExportableMessagingKey(address: Uint8Array, protocol: ProtocolType, nonce: number): PrivateKey;
    accountExportableMessagingKey(): PrivateKey;
    accountMessagingKey(): PrivateMessagingKey;
    accountIdentityKey(): SignerWithPublicKey;
}
